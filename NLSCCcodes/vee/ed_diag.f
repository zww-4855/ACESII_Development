       SUBROUTINE ED_DIAG(ZOUT, NDIM, EOUT, NROOT, Z, HZ, MAXEXP, E0,
     &    ASMALL, APOWER, NSPACE, MAXPOWER, ICONV, ZTMP,
     &   SCR, MAXCOR, TOL, IUHF)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      LOGICAL PRINT2,PRINT, CONVRG
C
      DIMENSION ZOUT(NDIM, NROOT), EOUT(NROOT), Z(NDIM, NSPACE),
     &   HZ(NDIM, MAXEXP, MAXPOWER), ASMALL(NSPACE, NSPACE),
     &   APOWER(NSPACE, NSPACE, MAXPOWER), SCR(MAXCOR),
     &   ZTMP(NDIM), E0(NSPACE)
      DIMENSION ICONV(NROOT)
C
      COMMON /FLAGS/ IFLAGS(100)
C
      INDXF(I,J,N)=I+(J-1)*N
      DATA ONE,ZILCH /1.0D0,0.0D0/
      print2 = .false.
      print = IFLAGS(1) .GE. 3
C
      IF (PRINT2) THEN
        WRITE(6,*) ' Z-VECTORS IN ED_DIAG '
        CALL OUTPUT(Z, 1, NDIM, 1, NSPACE, NDIM, NSPACE, 1)
        WRITE(6,*) ' HZ IN ED_DIAG '
        DO IPOWER = 1, MAXPOWER
          WRITE(6,*) ' IPOWER IS ', IPOWER
          CALL OUTPUT(HZ(1,1,IPOWER),1, NDIM, 1,NSPACE,NDIM, NSPACE,1)
        ENDDO
      ENDIF
C
C CALCULATE APOWER
C
      IF (IUHF .EQ. 0) THEN
C        FACT = 2.0D0
        FACT = 1.0D0
      ELSE
        FACT = 1.0D0
      ENDIF
      DO IPOWER = 1, MAXPOWER
        CALL XGEMM('T', 'N', NSPACE, NSPACE, NDIM, FACT, Z,
     &     NDIM, HZ(1,1,IPOWER), NDIM, ZILCH,
     &     APOWER(1,1,IPOWER), NSPACE)
      ENDDO
C
      IF (PRINT2) THEN
        WRITE(6,*) ' APOWER IN ED_DIAG'
        DO IPOWER = 1, MAXPOWER
          WRITE(6,*) ' IPOWER ', IPOWER
          CALL OUTPUT(APOWER(1,1,IPOWER), 1, NSPACE, 1, NSPACE,
     &       NSPACE, NSPACE, 1)
        ENDDO
      ENDIF
C
      MAXITER = 20
C
      DO 10 IROOT = 1, NROOT
C        IF (ICONV(IROOT) .NE. 0) THEN
C
C  DETERMINE EIGENVALUE FROM ITERATIVE PROCEDURE
C
        ROOT = EOUT(IROOT)
        ITER = 0
C
  100   ITER = ITER + 1
C
C        CONSTRUCT ASMALL
C
        CALL ZERO(ASMALL,NSPACE*NSPACE)
C
        DO IPOWER = 1, MAXPOWER
          DO J = 1, NSPACE
            FACT = (E0(J) - ROOT) ** (IPOWER - 1)
            CALL SAXPY(NSPACE, FACT, APOWER(1,J,IPOWER),1,
     &         ASMALL(1,J), 1)
          ENDDO
        ENDDO
C
C DIAGONALIZE ASMALL
C
       IF (PRINT2) THEN
         WRITE(6,*) ' SUBSPACE MATRIX IN ED_DIAG'
         CALL OUTPUT(ASMALL,1, NSPACE, 1, NSPACE, NSPACE, NSPACE, 1)
       ENDIF
       NDIMR = NSPACE
       I000=1
       IEVAL = I000
       I010=I000+NDIMR
       I020=I010+NDIMR
       IEVEC=I020
       I030=I020+NDIMR*NDIMR
       I040=I030+NDIMR*NDIMR
       I050=I040+NDIMR
       IF (I050 .GT. MAXCOR) THEN
         WRITE(6,*) 'INSUFFICIENT MEMORY ED_DIAG', I050, MAXCOR
         CALL ERREX
       ENDIF
c
cmn       CALL RG(NDIMR,NDIMR,ASMALL,SCR(IEVAL),SCR(I010),1,SCR(IEVEC),
cmn     &    SCR(I030),SCR(I040),IERR)
c
       CALL MN_GEEV(NDIMR,NDIMR,ASMALL,SCR(IEVAL),SCR(I010),
     &              SCR(IEVEC),SCR(I030),MAXCOR-I030+1,IERR)
       CALL AFTERRG(NDIMR,SCR(IEVAL),SCR(I010),SCR(IEVEC),SCR(I030),
C     &             SCR(I040),IFLAGS(1))
     &    SCR(I040),1)
C
C OBTAIN NEW EIGENVECTORS AND FIND ONE HAVING BEST OVERLAP 
C WITH ZOUT(IROOT)
C
       XMAX=ZILCH
       IPOS=1
       DO 12 I=1,NSPACE
        CALL XGEMM('N','N',NDIM,1,NSPACE,ONE,Z,
     &             NDIM,SCR(IEVEC-1+INDXF(1,I,NSPACE)),NSPACE,ZILCH,
     &             SCR(I030),NDIM)
        X=ABS(SDOT(NDIM,SCR(I030),1,ZOUT(1,IROOT),1))
        IF(X.GT.XMAX)THEN
         XMAX=X
         IPOS=I
         CALL SCOPY(NDIM, SCR(I030), 1, ZTMP, 1)
        ENDIF
12     CONTINUE
       EVAL=SCR(IEVAL + IPOS -1)
C
C  CHECK CONVERGENCE OF EVAL
C
       CONVRG = ABS(ROOT - EVAL) .LT. TOL
       IF(PRINT)WRITE(6,1002)ITER,EVAL,XMAX, ABS(ROOT - EVAL)
       ROOT = EVAL
       IF (.NOT. CONVRG .AND. ITER .LT. MAXITER
C     &    .AND. MAXPOWER .NE. 1
     & )
     &    GOTO 100
C
C ASSUME CONVERGENCE
C
       EOUT(IROOT) = ROOT
       CALL SCOPY(NDIM, ZTMP, 1, ZOUT(1, IROOT), 1)
C
C       ENDIF
   10  CONTINUE
C
       RETURN
1002  FORMAT(T7,I4,T18,F15.8,T39,F8.6,T52,E15.10)
       END
         
       



