      SUBROUTINE TPDIJAB3(ICORE,MAXCOR,IUHF)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER DIRPRD,DISSYT,DISSYL,DISSYR,POP,VRT
      LOGICAL MBPT2,CC,CCD,RCCD,DRCCD,LCCD,LCCSD,CC2
      LOGICAL SS, SD, DS, DD
      DIMENSION ICORE(MAXCOR)
      DIMENSION I0T(2),I0R(2),I0L(2),I0Z1(2),I0Z2(2),
     &          I0Y1(2),I0Y2(2),I0RL(2)
      DIMENSION IOFFTT(8,2),IOFFRR(8,2),IOFFLL(8,2),
     &          IOFFRRLL(8,2)
C
C CALCULATION OF THE THIRD GROUP OF IJAB CONTRIBUTIONS TO
C THE EOM-CCSD TWO-PARTICLE DENSITY MATRIX
C
C - 1/4 P(IJ) R(I,E) L(M,E) T(MJ,AB)
C
C -1/8 P(IJ) R(IN,EF) L(MN,EF) T(MJ,AB)
C
C -1/4 P(IJ) T(I,E) L(M,E) R(MJ,AB)
C
C - 1/8 P(IJ) T(IN,EF) L(MN,EF) R(MJ,AB)
C
C
C - 1/4 P(AB) R(M,A) L(M,E) T(IJ,EB)
C
C - 1/8 P(AB) R(MN,AF) L(MN,EF) T(IJ,EB)
C
C - 1/4 P(AB) T(M,A) L(M,E) R(IJ,EB)
C
C - 1/8 P(AB) T(MN,AF) L(MN,EF) R(IJ,EB)
C
C WHICH GIVES
C
C - 1/4 P(IJ) Z(I,M) T(MJ,AB) - 1/4 P(IJ) Y(I,M) R(MJ,AB)
C
C - 1/4 P(AB) Z(A,E) T(IJ,EB) - 1/4 P(AB) Y(A,E) R(IJ,EB)
C
C WITH Z(I,M) = R(I,E) L(M,E) + 1/2 R(IN,EF) L(MN,EF)
C
C               + RL(M,E) T(I,E) 
C
C      Y(I,M) = T(I,E) L(M,E) + 1/2 T(IN,EF) L(MN,EF)
C
C      Z(A,E) = R(M,A) L(M,E) + 1/2 R(MN,AF) L(MN,EF)
C
C               + RL(M,E) T(M,A)
C
C      Y(A,E) = T(M,A) L(M,E) + 1/2 T(MN,AF) L(MN,EF)
C     
C  WITH RL(M,E) = L(MN,EF) R(N,F)
C
C ADDITIONAL TERMS ARE 
C
C
CEND 
C
C
C   
C CODED JG OCTOBER/93
C
      COMMON/STATSYM/IRREPX
      COMMON/SYMINF/NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON/SYM/POP(8,2),VRT(8,2),NT(2),NFMI(2),NFEA(2)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/DRVHBAR/SS, SD, DS, DD
      COMMON/REFTYPE/MBPT2,CC,CCD,RCCD,DRCCD,LCCD,LCCSD,CC2
C
      DATA AZERO,ONE,ONEM,TWO /0.D0,1.0D0,-1.0D0,2.D0/
C
C READ IN T1, R1, AND L1 AMPLITUDES
C
      I0T(1)=1
      I0T(2)=I0T(1)+IRPDPD(1,9)*IINTFP*IUHF
      I0R(1)=I0T(2)+IRPDPD(1,10)*IINTFP
      I0R(2)=I0R(1)+IRPDPD(IRREPX,9)*IINTFP*IUHF
      I0L(1)=I0R(2)+IRPDPD(IRREPX,10)*IINTFP
      I0L(2)=I0L(1)+IRPDPD(IRREPX,9)*IINTFP*IUHF
      I0Z1(1)=I0L(2)+IRPDPD(IRREPX,10)*IINTFP
      I0Z1(2)=I0Z1(1)+IRPDPD(1,21)*IINTFP*IUHF
      I0Y1(1)=I0Z1(2)+IRPDPD(1,22)*IINTFP
      I0Y1(2)=I0Y1(1)+IRPDPD(IRREPX,21)*IINTFP*IUHF
      I0Z2(1)=I0Y1(2)+IRPDPD(IRREPX,22)*IINTFP
      I0Z2(2)=I0Z2(1)+IRPDPD(1,19)*IINTFP*IUHF
      I0Y2(1)=I0Z2(2)+IRPDPD(1,20)*IINTFP
      I0Y2(2)=I0Y2(1)+IRPDPD(IRREPX,19)*IINTFP*IUHF
      I0RL(1)=I0Y2(2)+IRPDPD(IRREPX,20)*IINTFP
      I0RL(2)=I0RL(1)+IRPDPD(1,9)*IINTFP*IUHF
      ISTART=I0RL(2)+IRPDPD(1,10)*IINTFP
C 
      CALL GETLST(ICORE(I0R(1)),1,1,1,3,490)
      CALL GETLST(ICORE(I0L(1)),1,1,1,1,490)
      CALL GETLST(ICORE(I0T(1)),1,1,1,1,90)
      IF(IUHF.EQ.1) THEN
       CALL GETLST(ICORE(I0R(2)),1,1,1,4,490)
       CALL GETLST(ICORE(I0L(2)),1,1,1,2,490)
       CALL GETLST(ICORE(I0T(2)),1,1,1,2,90)
      ENDIF
      CALL ZERO(ICORE(I0Y1(1)),IRPDPD(IRREPX,19))
      CALL ZERO(ICORE(I0Y2(1)),IRPDPD(IRREPX,21))
      CALL ZERO(ICORE(I0Z1(1)),IRPDPD(1,19))
      CALL ZERO(ICORE(I0Z2(1)),IRPDPD(1,21))
      IF(IUHF.EQ.1) THEN
       CALL ZERO(ICORE(I0Y1(2)),IRPDPD(IRREPX,20))
       CALL ZERO(ICORE(I0Y2(2)),IRPDPD(IRREPX,22))
       CALL ZERO(ICORE(I0Z1(2)),IRPDPD(1,20))
       CALL ZERO(ICORE(I0Z2(2)),IRPDPD(1,22))
      ENDIF
C
      DO 2 ISPIN=1,1+IUHF
C
       IOFFR=I0R(ISPIN)
       IOFFL=I0L(ISPIN)
       IOFFT=I0T(ISPIN)
       IOFFRL=I0RL(ISPIN)
       DO 1 IRREPR=1,NIRREP
        IRREPL=DIRPRD(IRREPX,IRREPR)
        IOFFRR(IRREPR,ISPIN)=IOFFR
        IOFFLL(IRREPR,ISPIN)=IOFFL
        IOFFTT(IRREPR,ISPIN)=IOFFT
        IOFFRRLL(IRREPR,ISPIN)=IOFFRL
        IOFFR=IOFFR+VRT(IRREPL,ISPIN)*POP(IRREPR,ISPIN)*IINTFP
        IOFFL=IOFFL+VRT(IRREPL,ISPIN)*POP(IRREPR,ISPIN)*IINTFP
        IOFFT=IOFFT+VRT(IRREPR,ISPIN)*POP(IRREPR,ISPIN)*IINTFP
        IOFFRL=IOFFRL+VRT(IRREPR,ISPIN)*POP(IRREPR,ISPIN)*IINTFP
1      CONTINUE
2     CONTINUE
C
C FORM FIRST RL(M,E)
C
C AAAA AND BBBB SPIN CASES (UHF ONLY)
C
      IF(IUHF.EQ.1 .AND. .NOT. (MBPT2 .OR. CC2)) THEN
C
       DO 3 ISPIN=1,2
C
        LISTL=433+ISPIN
C
        NUMSYL=IRPDPD(1,ISYTYP(2,LISTL))
        DISSYL=IRPDPD(IRREPX,ISYTYP(1,LISTL))
C
        I000=ISTART
        IEND=ISTART+IINTFP*NUMSYL*DISSYL
        IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJKA8',IEND,MAXCOR)
C
        CALL GETLST(ICORE(I000),1,NUMSYL,1,1,LISTL)
C
        CALL XGEMM('N','N',1,NUMSYL,DISSYL,ONEM,ICORE(I0R(ISPIN)),1,
     &             ICORE(I000),DISSYL,AZERO,ICORE(I0RL(ISPIN)),1)
C
        LISTL=435+ISPIN
C
        NUMSYL=IRPDPD(1,ISYTYP(2,LISTL))
        DISSYL=IRPDPD(IRREPX,ISYTYP(1,LISTL))
C
        I000=ISTART
        IEND=ISTART+IINTFP*NUMSYL*DISSYL
        IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJKA8',IEND,MAXCOR)
C
        CALL GETLST(ICORE(I000),1,NUMSYL,1,1,LISTL)
C
        CALL XGEMM('N','N',1,NUMSYL,DISSYL,ONE,ICORE(I0R(3-ISPIN)),1,
     &             ICORE(I000),DISSYL,ONE,ICORE(I0RL(ISPIN)),1)
C
3      CONTINUE
C
      ELSE IF (IUHF.EQ.0 .AND. .NOT. (MBPT2 .OR. CC2)) THEN
C
       LISTL1=437
       LISTL2=439
C
       NUMSYL=IRPDPD(1,ISYTYP(2,LISTL1))
       DISSYL=IRPDPD(IRREPX,ISYTYP(1,LISTL1))
C
       I000=ISTART
       I010=I000+IINTFP*NUMSYL*DISSYL
       IEND=I010+IINTFP*NUMSYL*DISSYL
C
       CALL GETLST(ICORE(I000),1,NUMSYL,1,1,LISTL1)
       CALL GETLST(ICORE(I010),1,NUMSYL,1,1,LISTL2)
C
       CALL SSCAL(NUMSYL*DISSYL,TWO,ICORE(I000),1)
       CALL SAXPY(NUMSYL*DISSYL,ONEM,ICORE(I010),1,ICORE(I000),1)
C
       CALL XGEMM('N','N',1,NUMSYL,DISSYL,ONE,ICORE(I0R(1)),1,
     &            ICORE(I000),DISSYL,AZERO,ICORE(I0RL(1)),1)
C
      ELSE

       CALL ZERO(ICORE(I0RL(1)),NT(1))
       IF (IUHF .NE. 0) CALL ZERO(ICORE(I0RL(2)),NT(2))
        
      ENDIF 
C
C
C LOOP OVER SPIN CASES
C
      DO 10000 ISPIN=1,1+IUHF
C
C FIRST CONTRIBUTIONS TO Z1 AND Y1
C
        IOFFZ=I0Z1(ISPIN)
C
        DO 100 IRREPI=1,NIRREP
C
         IRREPE=DIRPRD(IRREPI,IRREPX)
         IRREPM=DIRPRD(IRREPE,IRREPX)
C
         NOCCI=POP(IRREPI,ISPIN)
         NOCCM=POP(IRREPM,ISPIN)
         NVRTE=VRT(IRREPE,ISPIN)
C
         IOFFR=IOFFRR(IRREPI,ISPIN)
         IOFFL=IOFFLL(IRREPM,ISPIN)
C
         CALL XGEMM('T','N',NOCCM,NOCCI,NVRTE,ONE,ICORE(IOFFL),NVRTE,
     &              ICORE(IOFFR),NVRTE,AZERO,ICORE(IOFFZ),NOCCM)
C
         IOFFZ=IOFFZ+IINTFP*NOCCI*NOCCM
C
100     CONTINUE
        call checksum('tpd3z1',icore(i0z1(ispin)),IRPDPD(1,20+ISPIN),
     &                 s)
C
C THIRD CONTRIBUTIONS TO Z1 AND Y1
C
        IOFFZ=I0Z1(ISPIN)
C
        DO 101 IRREPI=1,NIRREP
C
         IRREPE=IRREPI
         IRREPM=IRREPE
C
         NOCCI=POP(IRREPI,ISPIN)
         NOCCM=POP(IRREPM,ISPIN)
         NVRTE=VRT(IRREPE,ISPIN)
C
         IOFFT=IOFFTT(IRREPI,ISPIN)
         IOFFRL=IOFFRRLL(IRREPM,ISPIN)
C
         CALL XGEMM('T','N',NOCCM,NOCCI,NVRTE,ONE,ICORE(IOFFRL),NVRTE,
     &              ICORE(IOFFT),NVRTE,ONE,ICORE(IOFFZ),NOCCM)
C
         IOFFZ=IOFFZ+IINTFP*NOCCI*NOCCM
C
101     CONTINUE
        call checksum('tpd3z1',icore(i0z1(ispin)),IRPDPD(1,20+ISPIN),
     &                 s)
C
        IOFFZ=I0Y1(ISPIN)
C
        DO 200 IRREPI=1,NIRREP
C
         IRREPE=IRREPI
         IRREPM=DIRPRD(IRREPE,IRREPX)
C
         NOCCI=POP(IRREPI,ISPIN)
         NOCCM=POP(IRREPM,ISPIN)
         NVRTE=VRT(IRREPE,ISPIN)
C
         IOFFT=IOFFTT(IRREPI,ISPIN)
         IOFFL=IOFFLL(IRREPM,ISPIN)
C
         CALL XGEMM('T','N',NOCCM,NOCCI,NVRTE,ONE,ICORE(IOFFL),NVRTE,
     &              ICORE(IOFFT),NVRTE,AZERO,ICORE(IOFFZ),NOCCM)
C
         IOFFZ=IOFFZ+IINTFP*NOCCI*NOCCM
C
200     CONTINUE
        call checksum('1tpd3y1 ',icore(i0Y1(ispin)),
     &           IRPDPD(IRREPX,20+ISPIN),s)
C
C FIRST CONTRIBUTIONS TO Z2
C
        IOFFZ=I0Z2(ISPIN)
C
        DO 300 IRREPE=1,NIRREP
C
         IRREPM=DIRPRD(IRREPE,IRREPX)
         IRREPA=DIRPRD(IRREPM,IRREPX)
C
         NVRTA=VRT(IRREPA,ISPIN)
         NOCCM=POP(IRREPM,ISPIN)
         NVRTE=VRT(IRREPE,ISPIN)
C
         IOFFR=IOFFRR(IRREPM,ISPIN)
         IOFFL=IOFFLL(IRREPM,ISPIN)
C
         CALL XGEMM('N','T',NVRTA,NVRTE,NOCCM,ONE,ICORE(IOFFR),NVRTA,
     &              ICORE(IOFFL),NVRTE,AZERO,ICORE(IOFFZ),NVRTA)
C
         IOFFZ=IOFFZ+IINTFP*NVRTE*NVRTA
C
300     CONTINUE
        call checksum('2tpd3z2',icore(i0z2(ispin)),IRPDPD(1,18+ISPIN),
     &                 s)
C
C SG 2/96 
C  exit point for P-EOM-MBPT(2).  The rest of the terms are either
C    not wanted or not needed.
C
        IF ((MBPT2 .OR. LCCD .OR. LCCSD .OR. RCCD .OR. DRCCD)
     &      .AND. .NOT.DD)  GOTO 10000 
C
C THIRD CONTRIBUTIONS TO Z2 
C
        IOFFZ=I0Z2(ISPIN)
C
        DO 301 IRREPE=1,NIRREP
C
         IRREPM=IRREPE
         IRREPA=IRREPM
C
         NVRTA=VRT(IRREPA,ISPIN)
         NOCCM=POP(IRREPM,ISPIN)
         NVRTE=VRT(IRREPE,ISPIN)
C
         IOFFT=IOFFTT(IRREPM,ISPIN)
         IOFFRL=IOFFRRLL(IRREPM,ISPIN)
C
         CALL XGEMM('N','T',NVRTA,NVRTE,NOCCM,ONE,ICORE(IOFFT),NVRTA,
     &              ICORE(IOFFRL),NVRTE,ONE,ICORE(IOFFZ),NVRTA)
C
         IOFFZ=IOFFZ+IINTFP*NVRTE*NVRTA
C
301     CONTINUE
        call checksum('2tpd3z2',icore(i0z2(ispin)),IRPDPD(1,18+ISPIN),
     &                 s)
C
C FIRST CONTRIBUTION TO Y2
C
        IOFFZ=I0Y2(ISPIN)
C
        DO 400 IRREPE=1,NIRREP
C
         IRREPM=DIRPRD(IRREPE,IRREPX)
         IRREPA=IRREPM
C
         NVRTA=VRT(IRREPA,ISPIN)
         NOCCM=POP(IRREPM,ISPIN)
         NVRTE=VRT(IRREPE,ISPIN)
C
         IOFFT=IOFFTT(IRREPM,ISPIN)
         IOFFL=IOFFLL(IRREPM,ISPIN)
C
         CALL XGEMM('N','T',NVRTA,NVRTE,NOCCM,ONE,ICORE(IOFFT),NVRTA,
     &              ICORE(IOFFL),NVRTE,AZERO,ICORE(IOFFZ),NVRTA)
C
         IOFFZ=IOFFZ+IINTFP*NVRTE*NVRTA
C
400     CONTINUE
        call checksum('3tpd3y2 ',icore(i0y2(ispin)),
     &                IRPDPD(IRREPX,18+ISPIN),s)
C
C SECOND CONTRIBUTIONS TO Z1 AND Y1
C
        IF (CC2) GO TO 10000

        IF(IUHF.EQ.1) THEN
C
         LISTL=443+ISPIN
         LISTR=460+ISPIN
C
         DO 500 IRREPR=1,NIRREP
C
          IRREPL=DIRPRD(IRREPR,IRREPX)
C
          NUMSYL=IRPDPD(IRREPR,ISYTYP(2,LISTL))
          DISSYL=IRPDPD(IRREPL,ISYTYP(1,LISTL))
          NUMSYR=IRPDPD(IRREPR,ISYTYP(2,LISTR))
          DISSYR=IRPDPD(IRREPL,ISYTYP(1,LISTR))
          NOCCSQ=IRPDPD(IRREPR,20+ISPIN)
C
          I000=ISTART
          I010=I000+IINTFP*DISSYL*NOCCSQ
          IEND=I010+IINTFP*DISSYR*NOCCSQ
          IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJAB3',IEND,MAXCOR)
C
C GET L AND R AMPLITUDES
C
          CALL GETLST(ICORE(I000),1,NUMSYL,1,IRREPR,LISTL)
          CALL GETLST(ICORE(I010),1,NUMSYR,1,IRREPR,LISTR)
C
C EXPAND RIGHT HANDSIDE
C
          CALL SYMEXP(IRREPR,POP(1,ISPIN),DISSYL,ICORE(I000))
          CALL SYMEXP(IRREPR,POP(1,ISPIN),DISSYR,ICORE(I010))
C
          IOFFZ=I0Z1(ISPIN)
          IOFFR=I010
          IOFFL=I000
C
          DO 510 IRREPI=1,NIRREP
C 
           IRREPM=IRREPI
           IRREPN=DIRPRD(IRREPI,IRREPR)
C
           NOCCI=POP(IRREPI,ISPIN)
           NOCCM=POP(IRREPM,ISPIN)
           NOCCN=POP(IRREPN,ISPIN)
C
           CALL XGEMM('T','N',NOCCM,NOCCI,DISSYL*NOCCN,ONE,
     &                ICORE(IOFFL),DISSYL*NOCCN,ICORE(IOFFR),
     &                DISSYR*NOCCN,ONE,ICORE(IOFFZ),NOCCM) 
C
           IOFFZ=IOFFZ+IINTFP*NOCCM*NOCCI
           IOFFL=IOFFL+IINTFP*DISSYL*NOCCN*NOCCM
           IOFFR=IOFFR+IINTFP*DISSYR*NOCCN*NOCCI
C
510       CONTINUE
C
500      CONTINUE
C
        ENDIF
C
C SECOND TERM, UHF AND RHF, SPIN ADAPT IN RHF
C
        LISTL=446
        LISTR=463
C
        DO 600 IRREPR=1,NIRREP
C
         IRREPL=DIRPRD(IRREPR,IRREPX)
C
         NUMSYL=IRPDPD(IRREPR,ISYTYP(2,LISTL))
         DISSYL=IRPDPD(IRREPL,ISYTYP(1,LISTL))
         NUMSYR=IRPDPD(IRREPR,ISYTYP(2,LISTR))
         DISSYR=IRPDPD(IRREPL,ISYTYP(1,LISTR))
C
         I000=ISTART
         I010=I000+IINTFP*DISSYL*NUMSYL
         ITMP=I010+IINTFP*DISSYR*NUMSYR
         IEND=ITMP+3*IINTFP*MAX(DISSYR,DISSYL,NUMSYR,NUMSYL)
         IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJAB3',IEND,MAXCOR)
C
C GET L AMPLITUDES
C
         CALL GETLST(ICORE(I000),1,NUMSYL,1,IRREPR,LISTL)
C
         IF(IUHF.EQ.1.AND.ISPIN.EQ.1) THEN
          CALL SYMTR1(IRREPR,POP(1,1),POP(1,2),DISSYL,ICORE(I000),
     &                ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYL),
     &                ICORE(ITMP+2*IINTFP*DISSYL))
         ENDIF
C
C GET R AMPLITUDES
C
        CALL GETLST(ICORE(I010),1,NUMSYR,1,IRREPR,LISTR)
C
C FOR RHF, SPIN ADAPT R AMPLITUDES
C
        IF(IUHF.EQ.0) CALL SPINAD1(IRREPR,POP(1,1),DISSYR,
     &                             ICORE(I010),ICORE(ITMP),
     &                             ICORE(ITMP+IINTFP*DISSYR))
C
        IF(IUHF.EQ.1.AND.ISPIN.EQ.1) THEN
         CALL SYMTR1(IRREPR,POP(1,1),POP(1,2),DISSYR,ICORE(I010),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYR),
     &               ICORE(ITMP+2*IINTFP*DISSYR))
        ENDIF
C
        IOFFZ=I0Z1(ISPIN)
        IOFFL=I000
        IOFFR=I010
C
        DO 610 IRREPI=1,NIRREP
C
         IRREPM=IRREPI   
         IRREPN=DIRPRD(IRREPR,IRREPI)
C
         NOCCI=POP(IRREPI,ISPIN)
         NOCCM=POP(IRREPM,ISPIN)
         NOCCN=POP(IRREPN,3-ISPIN)
C
         CALL XGEMM('T','N',NOCCM,NOCCI,DISSYL*NOCCN,ONE,
     &              ICORE(IOFFL),DISSYL*NOCCN,ICORE(IOFFR),
     &              DISSYR*NOCCN,ONE,ICORE(IOFFZ),NOCCM)
C
         IOFFZ=IOFFZ+IINTFP*NOCCM*NOCCI
         IOFFL=IOFFL+IINTFP*DISSYL*NOCCN*NOCCM
         IOFFR=IOFFR+IINTFP*DISSYR*NOCCN*NOCCI
C
610     CONTINUE
C
600     CONTINUE
C
        call checksum('4tpd3z1 ',icore(i0z1(ispin)),IRPDPD(1,20+ISPIN),
     &                 s)
C
        IF(IUHF.EQ.1) THEN
C
         LISTL=443+ISPIN
         LISTT=43+ISPIN
C
C LOOP OVER IRREPS
C
         DO 700 IRREPR=1,NIRREP
C
          IRREPL=DIRPRD(IRREPR,IRREPX)
C
          NUMSYT=IRPDPD(IRREPR,ISYTYP(2,LISTT))
          DISSYT=IRPDPD(IRREPR,ISYTYP(1,LISTT))
          NUMSYL=IRPDPD(IRREPL,ISYTYP(2,LISTL))
          DISSYL=IRPDPD(IRREPR,ISYTYP(1,LISTL))
          NOCCSQ1=IRPDPD(IRREPR,20+ISPIN)
          NOCCSQ2=IRPDPD(IRREPL,20+ISPIN)
C
C  ALLOCATE MEMORY
C
          I000=ISTART
          I010=I000+IINTFP*NOCCSQ1*DISSYT
          IEND=I010+IINTFP*NOCCSQ2*DISSYL
          IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJAB3',IEND,MAXCOR)
C
C GET T AMPLITUDES
C
          CALL GETLST(ICORE(I000),1,NUMSYT,1,IRREPR,LISTT)
C
C GET L AMPLITUDES
C
          CALL GETLST(ICORE(I010),1,NUMSYL,1,IRREPL,LISTL)
C
C EXPAND RIGHT-HANDSIDE OF R AND L
C
          CALL SYMEXP(IRREPR,POP(1,ISPIN),DISSYT,ICORE(I000))
          CALL SYMEXP(IRREPL,POP(1,ISPIN),DISSYL,ICORE(I010))
C
          IOFFY=I0Y1(ISPIN)
          IOFFT=I000
C
          DO 710 IRREPI=1,NIRREP
C
           IRREPM=DIRPRD(IRREPX,IRREPI)
           IRREPN=DIRPRD(IRREPR,IRREPI)
C
           NOCCI=POP(IRREPI,ISPIN)
           NOCCM=POP(IRREPM,ISPIN)
           NOCCN=POP(IRREPN,ISPIN)
C
C GET OFFSET FOR L2 ARRAY
C
           IOFFL=I010
           DO 711 IRREP1=1,IRREPM-1
            IOFFL=IOFFL+IINTFP*DISSYL*POP(IRREP1,ISPIN)*
     &             POP(DIRPRD(IRREPL,IRREP1),ISPIN)
711        CONTINUE
C
C PERFORM MULTIPLICATION
C
           CALL XGEMM('T','N',NOCCM,NOCCI,NOCCN*DISSYT,ONE,
     &                ICORE(IOFFL),DISSYL*NOCCN,
     &                ICORE(IOFFT),DISSYT*NOCCN,
     &                ONE,ICORE(IOFFY),NOCCM)
C
C UPDATE OFFSETS
C
           IOFFY=IOFFY+IINTFP*NOCCI*NOCCM
           IOFFT=IOFFT+IINTFP*DISSYT*NOCCI*NOCCN
C
710       CONTINUE
C
700      CONTINUE
        call checksum('5tpd3y1 ',icore(i0y1(ispin)),
     &                  irpdpd(1,20+ispin),s)
C
        ENDIF
C
        LISTL=446
        LISTT=46
C
C LOOP OVER IRREPS
C
        DO 800 IRREPR=1,NIRREP
C
         IRREPL=DIRPRD(IRREPR,IRREPX)
C
         NUMSYT=IRPDPD(IRREPR,ISYTYP(2,LISTT))
         DISSYT=IRPDPD(IRREPR,ISYTYP(1,LISTT))
         NUMSYL=IRPDPD(IRREPL,ISYTYP(2,LISTL))
         DISSYL=IRPDPD(IRREPR,ISYTYP(1,LISTL))
C
C  ALLOCATE MEMORY
C
         I000=ISTART
         I010=I000+IINTFP*DISSYT*NUMSYT
         ITMP=I010+IINTFP*DISSYL*NUMSYL
         IEND=ITMP+3*IINTFP*MAX(NUMSYT,DISSYT,NUMSYL,DISSYL)
         IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJAB3',IEND,MAXCOR)
C
C GET T AMPLITUDES
C
         CALL GETLST(ICORE(I000),1,NUMSYT,1,IRREPR,LISTT)
C
C FOR RHF, SPIN ADAPT T AMPLITUDES
C
         IF(IUHF.EQ.0) CALL SPINAD1(IRREPR,POP(1,1),DISSYT,
     &                              ICORE(I000),ICORE(ITMP),
     &                              ICORE(ITMP+IINTFP*DISSYT))
C
C GET L AMPLITUDES
C
         CALL GETLST(ICORE(I010),1,NUMSYL,1,IRREPL,LISTL)
C
C FOR ISPIN = 1 AND UHF, INTERCHANGE THE TWO SLOWEST INDICES
C
         IF(IUHF.EQ.1.AND.ISPIN.EQ.1) THEN
C
          CALL SYMTR1(IRREPR,POP(1,1),POP(1,2),DISSYT,ICORE(I000),
     &                ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYT),
     &                ICORE(ITMP+2*IINTFP*DISSYT))
C
          CALL SYMTR1(IRREPL,POP(1,1),POP(1,2),DISSYL,ICORE(I010),
     &                ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYL),
     &                ICORE(ITMP+2*IINTFP*DISSYL))
C
         ENDIF

         IOFFY=I0Y1(ISPIN)
         IOFFT=I000
C
         DO 810 IRREPI=1,NIRREP
C
          IRREPM=DIRPRD(IRREPX,IRREPI)
          IRREPN=DIRPRD(IRREPR,IRREPI)
      
          NOCCI=POP(IRREPI,ISPIN)
          NOCCM=POP(IRREPM,ISPIN)
          NOCCN=POP(IRREPN,3-ISPIN)
C
C GET OFFSET FOR L2 ARRAY
C
          IOFFL=I010
          DO 811 IRREP1=1,IRREPM-1
           IOFFL=IOFFL+IINTFP*DISSYL*POP(IRREP1,ISPIN)*
     &            POP(DIRPRD(IRREPL,IRREP1),3-ISPIN)
811       CONTINUE
C
C PERFORM MULTIPLICATION
C
          CALL XGEMM('T','N',NOCCM,NOCCI,NOCCN*DISSYT,ONE,
     &               ICORE(IOFFL),DISSYL*NOCCN,
     &               ICORE(IOFFT),DISSYT*NOCCN,
     &               ONE,ICORE(IOFFY),NOCCM)
C
C UPDATE OFFSETS
C
          IOFFY=IOFFY+IINTFP*NOCCI*NOCCM
          IOFFT=IOFFT+IINTFP*DISSYT*NOCCI*NOCCN
C
810      CONTINUE
C
800     CONTINUE
        call checksum('6tpd3y1 ',icore(i0y1(ispin)),
     &                  irpdpd(irrepx,20+ispin),s)
C
C SECOND CONTRIBUTIONS TO Z2 AND Y2
C
        IF(IUHF.EQ.1) THEN
C
         LISTL=443+ISPIN
         LISTR=460+ISPIN
C
         DO 900 IRREPR=1,NIRREP
C
          IRREPL=DIRPRD(IRREPR,IRREPX)
C
          NUMSYL=IRPDPD(IRREPL,ISYTYP(2,LISTL))
          DISSYL=IRPDPD(IRREPR,ISYTYP(1,LISTL))
          NUMSYR=IRPDPD(IRREPL,ISYTYP(2,LISTR))
          DISSYR=IRPDPD(IRREPR,ISYTYP(1,LISTR))
          NVRTSQ=IRPDPD(IRREPR,18+ISPIN)
C
          I000=ISTART
          I010=I000+IINTFP*NUMSYL*NVRTSQ
          ITMP=I010+IINTFP*NUMSYR*NVRTSQ
          IEND=ITMP+IINTFP*MAX(DISSYL,DISSYT,NUMSYT,NUMSYR)
          IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJAB3',IEND,MAXCOR)
C
C GET L AND R AMPLITUDES
C
          CALL GETTRN(ICORE(I000),ICORE(ITMP),DISSYL,NUMSYL,
     &                1,IRREPL,LISTL)
          CALL GETTRN(ICORE(I010),ICORE(ITMP),DISSYR,NUMSYR,
     &                1,IRREPL,LISTR)
C
C EXPAND RIGHT HANDSIDE
C
          CALL SYMEXP(IRREPR,VRT(1,ISPIN),NUMSYL,ICORE(I000))
          CALL SYMEXP(IRREPR,VRT(1,ISPIN),NUMSYR,ICORE(I010))
C
          IOFFZ=I0Z2(ISPIN)
          IOFFR=I010
          IOFFL=I000
C
          DO 910 IRREPA=1,NIRREP
C 
           IRREPE=IRREPA
           IRREPF=DIRPRD(IRREPA,IRREPR)
C
           NVRTA=VRT(IRREPA,ISPIN)
           NVRTE=VRT(IRREPE,ISPIN)
           NVRTF=VRT(IRREPF,ISPIN)
C
           CALL XGEMM('T','N',NVRTA,NVRTE,NUMSYL*NVRTF,ONE,
     &                ICORE(IOFFR),NUMSYR*NVRTF,ICORE(IOFFL),
     &                NUMSYL*NVRTF,ONE,ICORE(IOFFZ),NVRTA) 
C
           IOFFZ=IOFFZ+IINTFP*NVRTA*NVRTE
           IOFFL=IOFFL+IINTFP*NUMSYL*NVRTE*NVRTF
           IOFFR=IOFFR+IINTFP*NUMSYR*NVRTF*NVRTA
C
910       CONTINUE
C
900      CONTINUE
C
        ENDIF
C
C SECOND TERM, UHF AND RHF, SPIN ADAPT IN RHF
C
        LISTL=446
        LISTR=463
C
        DO 1000 IRREPR=1,NIRREP
C
         IRREPL=DIRPRD(IRREPR,IRREPX)
C
         NUMSYL=IRPDPD(IRREPL,ISYTYP(2,LISTL))
         DISSYL=IRPDPD(IRREPR,ISYTYP(1,LISTL))
         NUMSYR=IRPDPD(IRREPL,ISYTYP(2,LISTR))
         DISSYR=IRPDPD(IRREPR,ISYTYP(1,LISTR))
C
         I000=ISTART
         I010=I000+IINTFP*DISSYL*NUMSYL
         ITMP=I010+IINTFP*DISSYR*NUMSYR
         IEND=ITMP+3*IINTFP*MAX(DISSYR,DISSYL,NUMSYR,NUMSYL)
         IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJAB3',IEND,MAXCOR)
C
C GET L AMPLITUDES
C
         CALL GETTRN(ICORE(I000),ICORE(ITMP),DISSYL,NUMSYL,
     &               1,IRREPL,LISTL)
C
         IF(IUHF.EQ.1.AND.ISPIN.EQ.1) THEN
          CALL SYMTR1(IRREPR,VRT(1,1),VRT(1,2),NUMSYL,ICORE(I000),
     &                ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYL),
     &                ICORE(ITMP+2*IINTFP*NUMSYL))
         ENDIF
C
C GET R AMPLITUDES
C
        CALL GETTRN(ICORE(I010),ICORE(ITMP),DISSYR,NUMSYR,
     &              1,IRREPL,LISTR)
C
C FOR RHF, SPIN ADAPT R AMPLITUDES
C
        IF(IUHF.EQ.0) CALL SPINAD1(IRREPR,VRT(1,1),NUMSYR,
     &                             ICORE(I010),ICORE(ITMP),
     &                             ICORE(ITMP+IINTFP*NUMSYR))
C
        IF(IUHF.EQ.1.AND.ISPIN.EQ.1) THEN
         CALL SYMTR1(IRREPR,VRT(1,1),VRT(1,2),NUMSYR,ICORE(I010),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYR),
     &               ICORE(ITMP+2*IINTFP*NUMSYR))
        ENDIF
C
        IOFFZ=I0Z2(ISPIN)
        IOFFL=I000
        IOFFR=I010
C
        DO 1010 IRREPA=1,NIRREP
C
         IRREPE=IRREPA   
         IRREPF=DIRPRD(IRREPR,IRREPA)
C
         NVRTA=VRT(IRREPA,ISPIN)
         NVRTE=VRT(IRREPE,ISPIN)
         NVRTF=VRT(IRREPF,3-ISPIN)
C
         CALL XGEMM('T','N',NVRTA,NVRTE,NUMSYL*NVRTF,ONE,
     &              ICORE(IOFFR),NUMSYR*NVRTF,ICORE(IOFFL),
     &              NUMSYL*NVRTF,ONE,ICORE(IOFFZ),NVRTA)
C
         IOFFZ=IOFFZ+IINTFP*NVRTA*NVRTE
         IOFFL=IOFFL+IINTFP*NUMSYL*NVRTF*NVRTE
         IOFFR=IOFFR+IINTFP*NUMSYR*NVRTF*NVRTA
C
1010    CONTINUE
C
1000    CONTINUE
C
        call checksum('7tpd3z2 ',icore(i0z2(ispin)),
     &                IRPDPD(1,18+ISPIN),s)
C
        IF(IUHF.EQ.1) THEN
C
         LISTL=443+ISPIN
         LISTT=43+ISPIN
C
C LOOP OVER IRREPS
C
         DO 1100 IRREPR=1,NIRREP
C
          IRREPL=DIRPRD(IRREPR,IRREPX)
C
          NUMSYT=IRPDPD(IRREPR,ISYTYP(2,LISTT))
          DISSYT=IRPDPD(IRREPR,ISYTYP(1,LISTT))
          NUMSYL=IRPDPD(IRREPR,ISYTYP(2,LISTL))
          DISSYL=IRPDPD(IRREPL,ISYTYP(1,LISTL))
          NVRTSQ1=IRPDPD(IRREPR,18+ISPIN)
          NVRTSQ2=IRPDPD(IRREPL,18+ISPIN)
C
C  ALLOCATE MEMORY
C
          I000=ISTART
          I010=I000+IINTFP*NVRTSQ1*NUMSYT
          ITMP=I010+IINTFP*NVRTSQ2*NUMSYL
          IEND=ITMP+IINTFP*MAX(NUMSYT,NUMSYL,DISSYT,DISSYR)
          IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJAB3',IEND,MAXCOR)
C
C GET T AMPLITUDES
C
          CALL GETTRN(ICORE(I000),ICORE(ITMP),DISSYT,NUMSYT,
     &                1,IRREPR,LISTT)
C
C GET L AMPLITUDES
C
          CALL GETTRN(ICORE(I010),ICORE(ITMP),DISSYL,NUMSYL,
     &                1,IRREPR,LISTL)
C
C EXPAND RIGHT-HANDSIDE OF R AND L
C
          CALL SYMEXP(IRREPR,VRT(1,ISPIN),NUMSYT,ICORE(I000))
          CALL SYMEXP(IRREPL,VRT(1,ISPIN),NUMSYL,ICORE(I010))
C
          IOFFY=I0Y2(ISPIN)
          IOFFL=I010
C
          DO 1110 IRREPE=1,NIRREP
C
           IRREPA=DIRPRD(IRREPX,IRREPE)
           IRREPF=DIRPRD(IRREPR,IRREPA)
C
           NVRTA=VRT(IRREPA,ISPIN)
           NVRTE=VRT(IRREPE,ISPIN)
           NVRTF=VRT(IRREPF,ISPIN)
C
C GET OFFSET FOR L2 ARRAY
C
           IOFFT=I000
           DO 1111 IRREP1=1,IRREPA-1
            IOFFT=IOFFT+IINTFP*NUMSYT*VRT(IRREP1,ISPIN)*
     &             VRT(DIRPRD(IRREPR,IRREP1),ISPIN)
1111       CONTINUE
C
C PERFORM MULTIPLICATION
C
           CALL XGEMM('T','N',NVRTA,NVRTE,NVRTF*NUMSYT,ONE,
     &                ICORE(IOFFT),NUMSYT*NVRTF,
     &                ICORE(IOFFL),NUMSYL*NVRTF,
     &                ONE,ICORE(IOFFY),NVRTA)
C
C UPDATE OFFSETS
C
           IOFFY=IOFFY+IINTFP*NVRTA*NVRTE
           IOFFL=IOFFL+IINTFP*NUMSYL*NVRTF*NVRTE
C
1110      CONTINUE
C
1100     CONTINUE
        call checksum('8tpd3y2 ',icore(i0y2(ispin)),
     &                  irpdpd(irrepx,18+ispin),s)
C
        ENDIF
C
        LISTL=446
        LISTT=46
C
C LOOP OVER IRREPS
C
        DO 1200 IRREPR=1,NIRREP
C
         IRREPL=DIRPRD(IRREPR,IRREPX)
C
         NUMSYT=IRPDPD(IRREPR,ISYTYP(2,LISTT))
         DISSYT=IRPDPD(IRREPR,ISYTYP(1,LISTT))
         NUMSYL=IRPDPD(IRREPR,ISYTYP(2,LISTL))
         DISSYL=IRPDPD(IRREPL,ISYTYP(1,LISTL))
C
C  ALLOCATE MEMORY
C
         I000=ISTART
         I010=I000+IINTFP*DISSYT*NUMSYT
         ITMP=I010+IINTFP*DISSYL*NUMSYL
         IEND=ITMP+3*IINTFP*MAX(NUMSYT,DISSYT,NUMSYL,DISSYL)
         IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJAB3',IEND,MAXCOR)
C
C GET T AMPLITUDES
C
         CALL GETTRN(ICORE(I000),ICORE(ITMP),DISSYT,NUMSYT,
     &               1,IRREPR,LISTT)
C
C FOR RHF, SPIN ADAPT T AMPLITUDES
C
         IF(IUHF.EQ.0) CALL SPINAD1(IRREPR,VRT(1,1),NUMSYT,
     &                              ICORE(I000),ICORE(ITMP),
     &                              ICORE(ITMP+IINTFP*NUMSYT))
C
C GET L AMPLITUDES
C
         CALL GETTRN(ICORE(I010),ICORE(ITMP),DISSYL,NUMSYL,
     &               1,IRREPR,LISTL)
C
C FOR ISPIN = 1 AND UHF, INTERCHANGE THE TWO SLOWEST INDICES
C
         IF(IUHF.EQ.1.AND.ISPIN.EQ.1) THEN
C
          CALL SYMTR1(IRREPR,VRT(1,1),VRT(1,2),NUMSYT,ICORE(I000),
     &                ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYT),
     &                ICORE(ITMP+2*IINTFP*NUMSYT))
C
          CALL SYMTR1(IRREPL,VRT(1,1),VRT(1,2),NUMSYL,ICORE(I010),
     &                ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYL),
     &                ICORE(ITMP+2*IINTFP*NUMSYL))
C
         ENDIF

         IOFFY=I0Y2(ISPIN)
         IOFFL=I010
C
         DO 1210 IRREPE=1,NIRREP
C
          IRREPA=DIRPRD(IRREPX,IRREPE)
          IRREPF=DIRPRD(IRREPR,IRREPA)
      
          NVRTA=VRT(IRREPA,ISPIN)
          NVRTE=VRT(IRREPE,ISPIN)
          NVRTF=VRT(IRREPF,3-ISPIN)
C
C GET OFFSET FOR L2 ARRAY
C
          IOFFT=I000
          DO 1211 IRREP1=1,IRREPA-1
           IOFFT=IOFFT+IINTFP*NUMSYT*VRT(IRREP1,ISPIN)*
     &            VRT(DIRPRD(IRREPR,IRREP1),3-ISPIN)
1211       CONTINUE
C
C PERFORM MULTIPLICATION
C
          CALL XGEMM('T','N',NVRTA,NVRTE,NVRTF*NUMSYT,ONE,
     &               ICORE(IOFFT),NUMSYT*NVRTF,
     &               ICORE(IOFFL),NUMSYL*NVRTF,
     &               ONE,ICORE(IOFFY),NVRTA)
C
C UPDATE OFFSETS
C
          IOFFY=IOFFY+IINTFP*NVRTA*NVRTE
          IOFFL=IOFFL+IINTFP*NUMSYL*NVRTF*NVRTE
C
1210      CONTINUE
C
1200     CONTINUE
        call checksum('10tpd3y2 ',icore(i0y2(ispin)),
     &                  irpdpd(irrepx,18+ispin),s)
C
10000  CONTINUE
C
C MULTIPLY Z1 AND Z2 WITH T(IJ,AB) AND Y1 AND Y2 WITH R(IJ,AB)
C
       CALL Z2XT2(ICORE,I0Z1,I0Z2,ISTART,MAXCOR,IUHF,44,114) 
C
      TWO=0.D0
      IF(IUHF.EQ.0)
     &   CALL CHECKGAM1(ICORE(ISTART),16,116,TWO,IUHF,2,VRT)
      IF(IUHF.EQ.1) THEN
       CALL CHECKGAM(ICORE(ISTART),16,116,TWO)
       CALL CHECKGAM(ICORE(ISTART),14,114,TWO)
       CALL CHECKGAM(ICORE(ISTART),15,115,TWO)
      ENDIF
C
      IF (CC .OR. DD)
     &   CALL Y2XR2(ICORE,I0Y1,I0Y2,ISTART,MAXCOR,IUHF,461,114)
C
C ALL DONE, RETURN
C
      TWO=0.D0
      IF(IUHF.EQ.0)
     &   CALL CHECKGAM1(ICORE,16,116,TWO,IUHF,2,VRT)
      IF(IUHF.EQ.1) THEN
       CALL CHECKGAM(ICORE,16,116,TWO)
       CALL CHECKGAM(ICORE,14,114,TWO)
       CALL CHECKGAM(ICORE,15,115,TWO)
      ENDIF
C
      RETURN
      END
