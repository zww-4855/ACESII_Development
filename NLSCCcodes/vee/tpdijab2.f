      SUBROUTINE TPDIJAB2(ICORE,MAXCOR,IUHF)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL MBPT2,CC,CCD,RCCD,DRCCD,LCCD,LCCSD,CC2
      INTEGER DIRPRD,DISSYT,DISSYL,DISSYG,DISSYT1,DISSYT2,POP,VRT
      DIMENSION ICORE(MAXCOR)
      DIMENSION I0T(2),I0R(2),I0L(2),I0Z(2)
      DIMENSION IOFFTT(8,2),IOFFLL(8,2)
C
C CALCULATION OF THE SECOND GROUP OF IJAB CONTRIBUTIONS TO
C THE EOM-CCSD TWO-PARTICLE DENSITY MATRIX
C
C    P(IJ) P(AB)  L(M,E) T(MI,EA) R(J,B)
C
C  - P(IJ) P(AB) L(E,M) T(M,A) T(I,E) R(J,B)
C
C  -  1/2 P(IJ) P(AB) T(I,E) T(MN,AF) L(EF,MN) R(J,B)
C
C  -  1/2 P(IJ) P(AB) T(M,A) T(IN,EF) L(EF,MN) R(J,B)
C
C WHICH GIVES
C
C   P(IJ) P(AB) Z(I,A) R(J,B)
C
C WITH
C
C   Z(I,A) = T(MI,EA) L(E,M) - T(M,A) L(E,M) T(I,E) 
C
C            - 1/2 T(MN,AF) L(EF,MN) T(I,E)
C
C            - 1/2 T(IN,EF) L(EF,MN) T(J,B)
C
C ADDITIONAL TERMS ARE 
C
C
CEND 
C
C CODED JG OCTOBER/93
C
      COMMON/STATSYM/IRREPX
      COMMON/SYMINF/NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON/SYM/POP(8,2),VRT(8,2),NT(2),NFMI(2),NFEA(2)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/REFTYPE/MBPT2,CC,CCD,RCCD,DRCCD,LCCD,LCCSD,CC2
C
      DATA AZERO,ONE,ONEM,TWO /0.D0,1.0D0,-1.0D0,2.D0/
C
C READ IN T1, R1, AND L1 AMPLITUDES
C
      I0T(1)=1
      I0T(2)=I0T(1)+IRPDPD(1,9)*IINTFP*IUHF
      I0R(1)=I0T(2)+IRPDPD(1,10)*IINTFP
      I0R(2)=I0R(1)+IRPDPD(IRREPX,9)*IINTFP*IUHF
      I0L(1)=I0R(2)+IRPDPD(IRREPX,10)*IINTFP
      I0L(2)=I0L(1)+IRPDPD(IRREPX,9)*IINTFP*IUHF
      I0Z(1)=I0L(2)+IRPDPD(IRREPX,10)*IINTFP
      I0Z(2)=I0Z(1)+IRPDPD(IRREPX,9)*IINTFP*IUHF
      I0R2L2=I0Z(2)+IRPDPD(IRREPX,10)*IINTFP
      ISTART=I0R2L2+MAX(IRPDPD(IRREPX,21),IRPDPD(IRREPX,22))*IINTFP
C
      DO 2 ISPIN=1,1+IUHF
C
       IOFFR=I0R(ISPIN)
       IOFFL=I0L(ISPIN)
       IOFFT=I0T(ISPIN)
       DO 1 IRREPR=1,NIRREP
        IRREPL=DIRPRD(IRREPX,IRREPR)
        IOFFLL(IRREPR,ISPIN)=IOFFL
        IOFFTT(IRREPR,ISPIN)=IOFFT
        IOFFR=IOFFR+VRT(IRREPL,ISPIN)*POP(IRREPR,ISPIN)*IINTFP
        IOFFL=IOFFL+VRT(IRREPL,ISPIN)*POP(IRREPR,ISPIN)*IINTFP
        IOFFT=IOFFT+VRT(IRREPR,ISPIN)*POP(IRREPR,ISPIN)*IINTFP
1      CONTINUE
2     CONTINUE
C
      CALL GETLST(ICORE(I0R(1)),1,1,1,3,490)
      CALL GETLST(ICORE(I0L(1)),1,1,1,1,490)
      CALL GETLST(ICORE(I0T(1)),1,1,1,1,90)
      IF(IUHF.EQ.1) THEN
       CALL GETLST(ICORE(I0R(2)),1,1,1,4,490)
       CALL GETLST(ICORE(I0L(2)),1,1,1,2,490)
       CALL GETLST(ICORE(I0T(2)),1,1,1,2,90)
      ENDIF
C
C LOOP OVER SPIN CASES
C
      DO 1000 ISPIN=1,1+IUHF
C
       LISTT1=38-ISPIN
       LISTT2=33+ISPIN
       IF(IUHF.EQ.0) THEN
        LISTT1=37 
        LISTT2=39
       ENDIF
C      
       NUMSYT1=IRPDPD(IRREPX,ISYTYP(2,LISTT1))
       DISSYT1=IRPDPD(IRREPX,ISYTYP(1,LISTT1))
       NUMSYT2=IRPDPD(IRREPX,ISYTYP(2,LISTT2))
       DISSYT2=IRPDPD(IRREPX,ISYTYP(1,LISTT2))
C
C ALLOCATE MEMORY
C
       I000=ISTART
       IF(IUHF.EQ.0) THEN
        I010=I000+IINTFP*NUMSYT1*DISSYT1
        IEND=I010+IINTFP*NUMSYT2*DISSYT2
       ELSE
        IEND=I000+IINTFP*MAX(NUMSYT1*DISSYT1,NUMSYT2*DISSYT2)
       ENDIF 
C
C GET T AMPLITUDES
C
       CALL GETLST(ICORE(I000),1,NUMSYT1,1,IRREPX,LISTT1)
C
C SPIN ADAPT FOR RHF
C
       IF(IUHF.EQ.0) THEN      
        CALL SSCAL(NUMSYT1*DISSYT1,TWO,ICORE(I000),1)
        CALL GETLST(ICORE(I010),1,NUMSYT2,1,IRREPX,LISTT2)
        CALL SAXPY(NUMSYT1*DISSYT1,ONEM,ICORE(I010),1,ICORE(I000),1)
       ENDIF
C
       CALL XGEMM('N','N',DISSYT1,1,NUMSYT1,ONE,ICORE(I000),DISSYT1,
     &            ICORE(I0L(3-ISPIN)),NUMSYT1,AZERO,
     &            ICORE(I0Z(ISPIN)),DISSYT1)
C
       IF(IUHF.EQ.1) THEN
C
C SECOND TERM, UHF ONLY
C
        CALL GETLST(ICORE(I000),1,NUMSYT2,1,IRREPX,LISTT2) 
C
        CALL XGEMM('N','N',DISSYT2,1,NUMSYT2,ONEM,ICORE(I000),DISSYT2,
     &             ICORE(I0L(ISPIN)),NUMSYT2,ONE,ICORE(I0Z(ISPIN)),
     &             DISSYT2)
C
        ENDIF
        call checksum('tpdijab2',icore(i0z(ispin)),DISSYT2,s)
C
C SECOND CONTRIBUTION
C
        IOFFT1=I0T(ISPIN)
        IOFFZ=I0Z(ISPIN)
C
        DO 300 IRREPI=1,NIRREP
C
         IRREPE=IRREPI
         IRREPM=DIRPRD(IRREPE,IRREPX)
         IRREPA=IRREPM
C
         NOCCI=POP(IRREPI,ISPIN)
         NOCCM=POP(IRREPM,ISPIN)
         NVRTE=VRT(IRREPE,ISPIN)
         NVRTA=VRT(IRREPA,ISPIN)
C
         IOFFT2=IOFFTT(IRREPM,ISPIN)
         IOFFL=IOFFLL(IRREPM,ISPIN)
C
         CALL XGEMM('T','N',NOCCM,NOCCI,NVRTE,ONEM,ICORE(IOFFL),NVRTE,
     &              ICORE(IOFFT1),NVRTE,AZERO,ICORE(ISTART),NOCCM)
C
         CALL XGEMM('N','N',NVRTA,NOCCI,NOCCM,ONE,ICORE(IOFFT2),NVRTA,
     &              ICORE(ISTART),NOCCM,ONE,ICORE(IOFFZ),NVRTA) 
C
         IOFFT1=IOFFT1+IINTFP*NOCCI*NVRTE
         IOFFZ=IOFFZ+IINTFP*NOCCI*NVRTA
C
300     CONTINUE
        call checksum('tpdijab2',icore(i0z(ispin)),DISSYT2,s)
C
C THIRD CONTRIBUTION
C
        IF (CC2) GO TO 1000

        IF(IUHF.EQ.1) THEN
C
         LISTL=443+ISPIN
         LISTT=43+ISPIN
C
         DO 500 IRREPR=1,NIRREP
C
          IRREPL=DIRPRD(IRREPR,IRREPX)
C
          NUMSYL=IRPDPD(IRREPR,ISYTYP(2,LISTL))
          DISSYL=IRPDPD(IRREPL,ISYTYP(1,LISTL))
          NUMSYT=IRPDPD(IRREPR,ISYTYP(2,LISTT))
          DISSYT=IRPDPD(IRREPR,ISYTYP(1,LISTT))
          NVRTSQ1=IRPDPD(IRREPL,18+ISPIN)
          NVRTSQ2=IRPDPD(IRREPR,18+ISPIN)
          NOV=IRPDPD(IRREPL,8+ISPIN)
C
          I000=ISTART
          I010=I000+IINTFP*NUMSYL*MAX(NVRTSQ1,NVRTSQ2)
          ITMP=I010+IINTFP*NUMSYL*NOV
          IEND=ITMP+IINTFP*MAX(DISSYT,DISSYL,NUMSYT,NUMSYL)
          IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJAB2',IEND,MAXCOR)
C
C GET L AMPLITUDES
C
          CALL GETTRN(ICORE(I000),ICORE(ITMP),DISSYL,NUMSYL,1,
     &                IRREPR,LISTL)
C
C EXPAND RIGHT HANDSIDE
C
          CALL SYMEXP(IRREPL,VRT(1,ISPIN),NUMSYL,ICORE(I000))
C
C MULTIPLY WITH T1 AMPLITUDES
C
          IOFFL=I000
          IOFFT=I0T(ISPIN)
          IOFFLT=I010
C
          DO 510 IRREPF=1,NIRREP
C 
           IRREPI=IRREPF
           IRREPE=DIRPRD(IRREPL,IRREPF)
C
           NVRTF=VRT(IRREPF,ISPIN)
           NVRTE=VRT(IRREPE,ISPIN)
           NOCCI=POP(IRREPI,ISPIN)
C 
           CALL XGEMM('N','N',NUMSYL*NVRTE,NOCCI,NVRTF,ONE,
     &                ICORE(IOFFL),NUMSYL*NVRTE,ICORE(IOFFT),
     &                NVRTF,AZERO,ICORE(IOFFLT),NUMSYL*NVRTE)
C
           IOFFL=IOFFL+IINTFP*NUMSYL*NVRTE*NVRTF
           IOFFT=IOFFT+IINTFP*NVRTF*NOCCI
           IOFFLT=IOFFLT+IINTFP*NUMSYL*NVRTE*NOCCI
C
510       CONTINUE
C
C GET T AMPLITUDES
C
          CALL GETTRN(ICORE(I000),ICORE(ITMP),DISSYT,NUMSYT,1,
     &                IRREPR,LISTT)         
C
C EXPAND RIGHT HANDSIDE
C
          CALL SYMEXP(IRREPR,VRT(1,ISPIN),NUMSYT,ICORE(I000))
C
          IOFFZ=I0Z(ISPIN)
          IOFFLT=I010
C
          DO 520 IRREPI=1,NIRREP
C 
           IRREPA=DIRPRD(IRREPX,IRREPI)
           IRREPE=DIRPRD(IRREPI,IRREPL)
C
           NOCCI=POP(IRREPI,ISPIN)
           NVRTA=VRT(IRREPA,ISPIN)
           NVRTE=VRT(IRREPE,ISPIN)
C
C GET OFFSETS FOR T2 ARRAY
C
           IOFFT=I000
           DO 521 IRREP1=1,IRREPA-1
            IOFFT=IOFFT+IINTFP*NUMSYT*VRT(IRREP1,ISPIN)*
     &                         VRT(DIRPRD(IRREPR,IRREP1),ISPIN)
521        CONTINUE
C
           CALL XGEMM('T','N',NVRTA,NOCCI,NUMSYL*NVRTE,ONEM,
     &                ICORE(IOFFT),NUMSYL*NVRTE,ICORE(IOFFLT),
     &                NUMSYL*NVRTE,ONE,ICORE(IOFFZ),NVRTA) 
C
           IOFFZ=IOFFZ+IINTFP*NVRTA*NOCCI
           IOFFLT=IOFFLT+IINTFP*NUMSYL*NVRTE*NOCCI
C
520       CONTINUE
C
500      CONTINUE
C
        ENDIF
C
C SECOND TERM, UHF AND RHF, SPIN ADAPT IN RHF
C
        LISTL=446
        LISTT=46
C
        DO 600 IRREPR=1,NIRREP
C
         IRREPL=DIRPRD(IRREPR,IRREPX)
C
         NUMSYL=IRPDPD(IRREPR,ISYTYP(2,LISTL))
         DISSYL=IRPDPD(IRREPL,ISYTYP(1,LISTL))
         NUMSYT=IRPDPD(IRREPR,ISYTYP(2,LISTT))
         DISSYT=IRPDPD(IRREPR,ISYTYP(1,LISTT))
         NOV=IRPDPD(IRREPL,13-ISPIN)
C
         I000=ISTART
         I010=I000+IINTFP*NUMSYL*MAX(DISSYL,DISSYT)
         ITMP=I010+IINTFP*NUMSYL*NOV
         IEND=ITMP+3*IINTFP*MAX(DISSYT,DISSYL,NUMSYT,NUMSYL)
         IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJAB2',IEND,MAXCOR)
C
C GET L AMPLITUDES
C
         CALL GETTRN(ICORE(I000),ICORE(ITMP),DISSYL,NUMSYL,1,
     &               IRREPR,LISTL)
C
         IF(IUHF.EQ.1.AND.ISPIN.EQ.1) THEN
          CALL SYMTR1(IRREPL,VRT(1,1),VRT(1,2),NUMSYL,ICORE(I000),
     &                ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYL),
     &                ICORE(ITMP+2*IINTFP*NUMSYL))
         ENDIF
C
C MULTIPLY WITH T1 AMPLITUDES
C
         IOFFL=I000
         IOFFT=I0T(ISPIN)
         IOFFLT=I010
C
         DO 610 IRREPF=1,NIRREP
C
          IRREPI=IRREPF
          IRREPE=DIRPRD(IRREPL,IRREPF)
C
          NVRTF=VRT(IRREPF,ISPIN)
          NVRTE=VRT(IRREPE,3-ISPIN)
          NOCCI=POP(IRREPI,ISPIN)
C
          CALL XGEMM('N','N',NUMSYL*NVRTE,NOCCI,NVRTF,ONE,
     &               ICORE(IOFFL),NUMSYL*NVRTE,ICORE(IOFFT),
     &               NVRTF,AZERO,ICORE(IOFFLT),NUMSYL*NVRTE)
C
          IOFFL=IOFFL+IINTFP*NUMSYL*NVRTE*NVRTF
          IOFFT=IOFFT+IINTFP*NVRTF*NOCCI
          IOFFLT=IOFFLT+IINTFP*NUMSYL*NVRTE*NOCCI
C
610      CONTINUE
C
C GET T AMPLITUDES
C
        CALL GETTRN(ICORE(I000),ICORE(ITMP),DISSYT,NUMSYT,1,
     &               IRREPR,LISTT)
C
C FOR RHF, SPIN ADAPT T AMPLITUDES
C
        IF(IUHF.EQ.0) CALL SPINAD1(IRREPR,VRT(1,1),NUMSYT,
     &                             ICORE(I000),ICORE(ITMP),
     &                             ICORE(ITMP+IINTFP*NUMSYT))
C
        IF(IUHF.EQ.1.AND.ISPIN.EQ.1) THEN
         CALL SYMTR1(IRREPR,VRT(1,1),VRT(1,2),NUMSYT,ICORE(I000),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYT),
     &               ICORE(ITMP+2*IINTFP*NUMSYT))
        ENDIF
C
        IOFFZ=I0Z(ISPIN)
        IOFFLT=I010
C
        DO 620 IRREPI=1,NIRREP
C
         IRREPA=DIRPRD(IRREPX,IRREPI)
         IRREPE=DIRPRD(IRREPI,IRREPL)
C
         NOCCI=POP(IRREPI,ISPIN)
         NVRTA=VRT(IRREPA,ISPIN)
         NVRTE=VRT(IRREPE,3-ISPIN)
C
C GET OFFSET FOR T2 ARRAY
C
         IOFFT=I000
         DO 621 IRREP1=1,IRREPA-1
          IOFFT=IOFFT+IINTFP*NUMSYT*VRT(IRREP1,ISPIN)*
     &                 VRT(DIRPRD(IRREP1,IRREPR),3-ISPIN)
621      CONTINUE
C
         CALL XGEMM('T','N',NVRTA,NOCCI,NUMSYL*NVRTE,ONEM,
     &              ICORE(IOFFT),NUMSYL*NVRTE,ICORE(IOFFLT),
     &              NUMSYL*NVRTE,ONE,ICORE(IOFFZ),NVRTA)
C
         IOFFZ=IOFFZ+IINTFP*NVRTA*NOCCI
         IOFFLT=IOFFLT+IINTFP*NUMSYL*NVRTE*NOCCI
C
620     CONTINUE
C
600     CONTINUE
C
        call checksum('tpdijab2',icore(i0z(ispin)),DISSYT2,s)
C
C FOURTH CONTRIBUTION
C
        CALL ZERO(ICORE(I0R2L2),IINTFP*IRPDPD(IRREPX,20+ISPIN))
C
        IF(IUHF.EQ.1) THEN
C
         LISTL=443+ISPIN
         LISTT=43+ISPIN
C
C LOOP OVER IRREPS
C
         DO 700 IRREPR=1,NIRREP
C
          IRREPL=DIRPRD(IRREPR,IRREPX)
C
          NUMSYT=IRPDPD(IRREPR,ISYTYP(2,LISTT))
          DISSYT=IRPDPD(IRREPR,ISYTYP(1,LISTT))
          NUMSYL=IRPDPD(IRREPL,ISYTYP(2,LISTL))
          DISSYL=IRPDPD(IRREPR,ISYTYP(1,LISTL))
          NOCCSQ1=IRPDPD(IRREPR,20+ISPIN)
          NOCCSQ2=IRPDPD(IRREPL,20+ISPIN)
C
C  ALLOCATE MEMORY
C
          I000=ISTART
          I010=I000+IINTFP*NOCCSQ1*DISSYT
          IEND=I010+IINTFP*NOCCSQ2*DISSYL
          IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJAB2',IEND,MAXCOR)
C
C GET T AMPLITUDES
C
          CALL GETLST(ICORE(I000),1,NUMSYT,1,IRREPR,LISTT)
C
C GET L AMPLITUDES
C
          CALL GETLST(ICORE(I010),1,NUMSYL,1,IRREPL,LISTL)
C
C EXPAND RIGHT-HANDSIDE OF R AND L
C
          CALL SYMEXP(IRREPR,POP(1,ISPIN),DISSYT,ICORE(I000))
          CALL SYMEXP(IRREPL,POP(1,ISPIN),DISSYL,ICORE(I010))
C
          IOFFRL=I0R2L2
          IOFFT=I000
C
          DO 710 IRREPI=1,NIRREP
C
           IRREPK=DIRPRD(IRREPX,IRREPI)
           IRREPM=DIRPRD(IRREPR,IRREPI)
C
           NOCCI=POP(IRREPI,ISPIN)
           NOCCK=POP(IRREPK,ISPIN)
           NOCCM=POP(IRREPM,ISPIN)
C
C GET OFFSET FOR L2 ARRAY
C
           IOFFL=I010
           DO 711 IRREP1=1,IRREPK-1
            IOFFL=IOFFL+IINTFP*DISSYL*POP(IRREP1,ISPIN)*
     &             POP(DIRPRD(IRREPL,IRREP1),ISPIN)
711        CONTINUE
C
C PERFORM MULTIPLICATION
C
           CALL XGEMM('T','N',NOCCK,NOCCI,NOCCM*DISSYT,ONEM,
     &                ICORE(IOFFL),DISSYL*NOCCM,
     &                ICORE(IOFFT),DISSYT*NOCCM,
     &                ONE,ICORE(IOFFRL),NOCCK)
C
C UPDATE OFFSETS
C
           IOFFRL=IOFFRL+IINTFP*NOCCI*NOCCK
           IOFFT=IOFFT+IINTFP*DISSYT*NOCCI*NOCCM
C
710       CONTINUE
C
700      CONTINUE
        call checksum('tpdijab1',icore(i0r2l2),irpdpd(1,20+ispin),
     &                 s)
C
        ENDIF
C
        LISTL=446
        LISTT=46
C
C LOOP OVER IRREPS
C
        DO 800 IRREPR=1,NIRREP
C
         IRREPL=DIRPRD(IRREPR,IRREPX)
C
         NUMSYT=IRPDPD(IRREPR,ISYTYP(2,LISTT))
         DISSYT=IRPDPD(IRREPR,ISYTYP(1,LISTT))
         NUMSYL=IRPDPD(IRREPL,ISYTYP(2,LISTL))
         DISSYL=IRPDPD(IRREPR,ISYTYP(1,LISTL))
C
C  ALLOCATE MEMORY
C
         I000=ISTART
         I010=I000+IINTFP*DISSYT*NUMSYT
         ITMP=I010+IINTFP*DISSYL*NUMSYL
         IEND=ITMP+3*IINTFP*MAX(NUMSYT,DISSYT,NUMSYL,DISSYL)
         IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIJAB2',IEND,MAXCOR)
C
C GET T AMPLITUDES
C
         CALL GETLST(ICORE(I000),1,NUMSYT,1,IRREPR,LISTT)
C
C FOR RHF, SPIN ADAPT T AMPLITUDES
C
         IF(IUHF.EQ.0) CALL SPINAD1(IRREPR,POP(1,1),DISSYT,
     &                              ICORE(I000),ICORE(ITMP),
     &                              ICORE(ITMP+IINTFP*DISSYT))
C
C GET L AMPLITUDES
C
         CALL GETLST(ICORE(I010),1,NUMSYL,1,IRREPL,LISTL)
C
C FOR ISPIN = 1 AND UHF, INTERCHANGE THE TWO SLOWEST INDICES
C
         IF(IUHF.EQ.1.AND.ISPIN.EQ.1) THEN
C
          CALL SYMTR1(IRREPR,POP(1,1),POP(1,2),DISSYT,ICORE(I000),
     &                ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYT),
     &                ICORE(ITMP+2*IINTFP*DISSYT))
C
          CALL SYMTR1(IRREPL,POP(1,1),POP(1,2),DISSYL,ICORE(I010),
     &                ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYL),
     &                ICORE(ITMP+2*IINTFP*DISSYL))
C
         ENDIF

         IOFFRL=I0R2L2
         IOFFT=I000
C
         DO 810 IRREPI=1,NIRREP
C
          IRREPK=DIRPRD(IRREPX,IRREPI)
          IRREPM=DIRPRD(IRREPR,IRREPI)
      
          NOCCI=POP(IRREPI,ISPIN)
          NOCCK=POP(IRREPK,ISPIN)
          NOCCM=POP(IRREPM,3-ISPIN)
C
C GET OFFSET FOR L2 ARRAY
C
          IOFFL=I010
          DO 811 IRREP1=1,IRREPK-1
           IOFFL=IOFFL+IINTFP*DISSYL*POP(IRREP1,ISPIN)*
     &            POP(DIRPRD(IRREPL,IRREP1),3-ISPIN)
811       CONTINUE
C
C PERFORM MULTIPLICATION
C
          CALL XGEMM('T','N',NOCCK,NOCCI,NOCCM*DISSYT,ONEM,
     &               ICORE(IOFFL),DISSYL*NOCCM,
     &               ICORE(IOFFT),DISSYT*NOCCM,
     &               ONE,ICORE(IOFFRL),NOCCK)
C
C UPDATE OFFSETS
C
          IOFFRL=IOFFRL+IINTFP*NOCCI*NOCCK
          IOFFT=IOFFT+IINTFP*DISSYT*NOCCI*NOCCM
C
810      CONTINUE
C
800     CONTINUE
        call checksum('tpdijab2',icore(i0r2l2),irpdpd(irrepx,20+ispin),
     &                 s)
C
C MULTIPLY WITH T1
C
        IOFFZ=I0Z(ISPIN)
        IOFFRL=I0R2L2
C
        DO 900 IRREPI=1,NIRREP
C
         IRREPM=DIRPRD(IRREPX,IRREPI)
         IRREPA=IRREPM
C
         NOCCI=POP(IRREPI,ISPIN)
         NOCCM=POP(IRREPM,ISPIN)
         NVRTA=VRT(IRREPA,ISPIN)
C
         IOFFT=IOFFTT(IRREPM,ISPIN)
C
         CALL XGEMM('N','N',NVRTA,NOCCI,NOCCM,ONE,ICORE(IOFFT),NVRTA,
     &              ICORE(IOFFRL),NOCCM,ONE,ICORE(IOFFZ),NVRTA)
C
         IOFFZ=IOFFZ+IINTFP*NVRTA*NOCCI
         IOFFRL=IOFFRL+IINTFP*NOCCM*NOCCI
C
900     CONTINUE
C 
        call checksum('tpdijab2',icore(i0z(ispin)),DISSYT2,s)
C 
1000   CONTINUE
C
       DO 1100 ISPIN=3-2*IUHF,3
C
        LISTG=113+ISPIN
C
        DO 1100 IRREP=1,NIRREP
C  
         NUMSYG=IRPDPD(IRREP,ISYTYP(2,LISTG))
         DISSYG=IRPDPD(IRREP,ISYTYP(1,LISTG))
C
         I000=ISTART
         IEND=I000+IINTFP*NUMSYG*DISSYG
         IF(IEND.GT.MAXCOR) CALL INSMEM('TPDIJAB2',IEND,MAXCOR)
C
         CALL GETLST(ICORE(I000),1,NUMSYG,1,IRREP,LISTG)
C
         IF(ISPIN.LT.3) THEN
          CALL R1Z(ICORE(I000),ICORE(I0R(ISPIN)),ICORE(I0R(ISPIN)),
     &             ICORE(I0Z(ISPIN)),ICORE(I0Z(ISPIN)),DISSYG,NUMSYG,
     &             POP(1,ISPIN),POP(1,ISPIN),VRT(1,ISPIN),VRT(1,ISPIN),
     &             IRREP,IRREPX,ISPIN)
         ELSE
          CALL R1Z(ICORE(I000),ICORE(I0R(1)),ICORE(I0R(2)),
     &             ICORE(I0Z(1)),ICORE(I0Z(2)),DISSYG,NUMSYG,
     &             POP(1,1),POP(1,2),VRT(1,1),VRT(1,2),
     &             IRREP,IRREPX,ISPIN)
         ENDIF
C
         call checksum('tpdijab2',icore(i000),numsyg*dissyg,s)
C
         CALL PUTLST(ICORE(I000),1,NUMSYG,1,IRREP,LISTG)
C
1100   CONTINUE
C
2000  CONTINUE
C
C ALL DONE, RETURN
C
      TWO=0.D0
      IF(IUHF.EQ.0)
     &   CALL CHECKGAM1(ICORE,16,116,TWO,IUHF,2,VRT)
      IF(IUHF.EQ.1) THEN
       CALL CHECKGAM(ICORE,16,116,TWO)
       CALL CHECKGAM(ICORE,14,114,TWO)
       CALL CHECKGAM(ICORE,15,115,TWO)
      ENDIF
C
      RETURN
      END
