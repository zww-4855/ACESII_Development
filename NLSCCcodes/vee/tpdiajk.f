     
      SUBROUTINE TPDIAJK(ICORE,MAXCOR,IUHF,FACT)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER DIRPRD,DISSYG,DISSYL,POP,VRT
      DIMENSION ICORE(MAXCOR)
      DIMENSION I0T(2),I0R(2)
      DIMENSION IOFFRR(8,2),IOFFGG(8)
C
C CALCULATION OF THE IAJK CONTRIBUTION TO
C THE EOM-CCSD TWO-PARTICLE DENSITY MATRIX
C 
C G(IA,JK) = - 1/2 R(I,E) L(JK,EA)
C
C ALSO, ONLY THE SUM OF G(IJ,KA) AND G(IA,JK) IS STORED ON DISK
C
CEND 
C
C CODED JG SEPTEMBER/93
C
      COMMON/STATSYM/IRREPX
      COMMON/SYMINF/NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON/SYM/POP(8,2),VRT(8,2),NT(2),NFMI(2),NFEA(2)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
C
      DATA AZERO,TWO/0.D0,2.D0/
C
C READ IN T1 AND R1 AMPLITUDES
C
      I0T(1)=1
      I0T(2)=I0T(1)+IRPDPD(1,9)*IINTFP*IUHF
      I0R(1)=I0T(2)+IRPDPD(1,10)*IINTFP
      I0R(2)=I0R(1)+IRPDPD(IRREPX,9)*IINTFP*IUHF
      ISTART=I0R(2)+IRPDPD(IRREPX,10)*IINTFP
C
      CALL GETLST(ICORE(I0R(1)),1,1,1,3,490)
      IF(IUHF.EQ.1) THEN
       CALL GETLST(ICORE(I0R(2)),1,1,1,4,490)
      ENDIF
C
C GET OFFSET FOR R1
C
      DO 1 ISPIN=1,2
       IOFF=0
       DO 2 IRREPR=1,NIRREP
        IRREPL=DIRPRD(IRREPX,IRREPR)
        IOFFRR(IRREPR,ISPIN)=IOFF
        IOFF=IOFF+IINTFP*VRT(IRREPL,ISPIN)*POP(IRREPR,ISPIN)
2      CONTINUE
1     CONTINUE
C
C AAAA AND BBBB SPIN CASES (UHF ONLY)
C
      IF(IUHF.EQ.1) THEN
C
       DO 1000 ISPIN=1,2
C
        LISTG=106+ISPIN
        LISTL=443+ISPIN
C
        DO 100 IRREPR=1,NIRREP
C
         IRREPL=DIRPRD(IRREPR,IRREPX) 
C
         NUMSYG=IRPDPD(IRREPR,ISYTYP(2,LISTG)) 
         DISSYG=IRPDPD(IRREPR,ISYTYP(1,LISTG))
         NUMSYL=IRPDPD(IRREPR,ISYTYP(2,LISTL))
         DISSYL=IRPDPD(IRREPL,ISYTYP(1,LISTL))
         NVRTSQ=IRPDPD(IRREPL,18+ISPIN)
C
C ALLOCATE MEMORY
C
         I000=ISTART
         I010=I000+IINTFP*NUMSYG*DISSYG
         ITMP=I010+IINTFP*NUMSYL*NVRTSQ
         IEND=ITMP+IINTFP*3*MAX(DISSYG,DISSYL,NUMSYG,NUMSYL)
         IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIAJK',IEND,MAXCOR)
C
C GET OFFSETS FOR G
C
         IOFF=0
         DO 101 IRREPRR=1,NIRREP
          IRREPRL=DIRPRD(IRREPRR,IRREPR)
          IOFFGG(IRREPRR)=IOFF
          IOFF=IOFF+IINTFP*DISSYG*VRT(IRREPRL,ISPIN)
     &                           *POP(IRREPRR,ISPIN)
101      CONTINUE
C
C GET L AMPLITUDES
C
         CALL GETTRN(ICORE(I010),ICORE(ITMP),DISSYL,
     &               NUMSYL,1,IRREPR,LISTL)
C
C EXPAND RIGHT HAND SIDE OF L AMPLITUDES
C
         CALL SYMEXP(IRREPL,VRT(1,ISPIN),NUMSYL,ICORE(I010))
C
C PERFORM MULTIPLICATION
C
         IOFFL=0
C
         DO 10 IRREPE=1,NIRREP
          IRREPA=DIRPRD(IRREPL,IRREPE)
          IRREPI=DIRPRD(IRREPE,IRREPX)
          NVRTA=VRT(IRREPA,ISPIN)
          NVRTE=VRT(IRREPE,ISPIN)
          NOCCI=POP(IRREPI,ISPIN)
C
          IOFFR=IOFFRR(IRREPI,ISPIN)
          IOFFG=IOFFGG(IRREPI)
C
          CALL XGEMM('N','N',NUMSYL*NVRTA,NOCCI,NVRTE,FACT,
     &               ICORE(I010+IOFFL),NUMSYL*NVRTA,ICORE(I0R(ISPIN)
     &               +IOFFR),NVRTE,AZERO,ICORE(I000+IOFFG),DISSYG*NVRTA)
C
          IOFFL=IOFFL+IINTFP*NUMSYL*NVRTA*NVRTE
C
10       CONTINUE
C
C TRANSPOSE THIRD AND FOURTH INDEX TO GET G(JK,IA)
C
         CALL SYMTR1(IRREPR,VRT(1,ISPIN),POP(1,ISPIN),
     &               DISSYG,ICORE(I000),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYG),
     &               ICORE(ITMP+2*IINTFP*DISSYG))
C
C SAVE G(IJ,KA) ON DISK
C
          call checksum('tpdiajk',icore(i000),numsyg*dissyg,s)
         CALL PUTLST(ICORE(I000),1,NUMSYG,1,IRREPR,LISTG)
C
100     CONTINUE
C
1000   CONTINUE
C
      ENDIF
C
C ABAB AND BABA SPIN CASE
C
      DO 2000 ISPIN=1,IUHF+1
C
       LISTG=111-ISPIN
       LISTL=446
C
       DO 1100 IRREPR=1,NIRREP
C
        IRREPL=DIRPRD(IRREPR,IRREPX) 
C
        NUMSYG=IRPDPD(IRREPR,ISYTYP(2,LISTG)) 
        DISSYG=IRPDPD(IRREPR,ISYTYP(1,LISTG))
        NUMSYL=IRPDPD(IRREPR,ISYTYP(2,LISTL))
        DISSYL=IRPDPD(IRREPL,ISYTYP(1,LISTL))
C
C ALLOCATE MEMORY
C
        I000=ISTART
        I010=I000+IINTFP*NUMSYG*DISSYG
        ITMP=I010+IINTFP*NUMSYL*DISSYL
        IEND=ITMP+IINTFP*3*MAX(DISSYL,NUMSYL,DISSYG,NUMSYG)
        IF(IEND.GE.MAXCOR) CALL INSMEM('TPDIAJK',IEND,MAXCOR)
C
C GET OFFSETS FOR G
C
        IOFF=0
        DO 1101 IRREPRR=1,NIRREP
         IRREPRL=DIRPRD(IRREPRR,IRREPR)
         IOFFGG(IRREPRR)=IOFF
         IOFF=IOFF+IINTFP*DISSYG*VRT(IRREPRL,3-ISPIN)
     &                          *POP(IRREPRR,ISPIN)
1101    CONTINUE
C
C GET L AMPLITUDES
C
        CALL GETTRN(ICORE(I010),ICORE(ITMP),DISSYL,NUMSYL,
     &              1,IRREPR,LISTL)
C
C FOR ISPIN=1 INTERCHANGE A AND B
C
        IF(ISPIN.EQ.1) THEN
         CALL SYMTR1(IRREPL,VRT(1,1),VRT(1,2),NUMSYL,ICORE(I010),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYL),
     &               ICORE(ITMP+2*IINTFP*NUMSYL))
        ENDIF
C
C PERFORM MULTIPLICATION
C
        IOFFL=0
C
        DO 110 IRREPE=1,NIRREP
         IRREPA=DIRPRD(IRREPL,IRREPE)
         IRREPI=DIRPRD(IRREPE,IRREPX)
         NVRTA=VRT(IRREPA,3-ISPIN)
         NVRTE=VRT(IRREPE,ISPIN)
         NOCCI=POP(IRREPI,ISPIN)
C
         IOFFR=IOFFRR(IRREPI,ISPIN)
         IOFFG=IOFFGG(IRREPI)
C
         CALL XGEMM('N','N',NUMSYL*NVRTA,NOCCI,NVRTE,-FACT,
     &              ICORE(I010+IOFFL),NUMSYL*NVRTA,ICORE(I0R(ISPIN)
     &              +IOFFR),NVRTE,AZERO,ICORE(I000+IOFFG),DISSYG*NVRTA) 
C
         IOFFL=IOFFL+IINTFP*NUMSYL*NVRTA*NVRTE
C
110     CONTINUE
C
C TRANSPOSE THIRD AND FOURTH INDEX TO GET G(JK,IA) (ONLY FOR ISPIN=1)
C
        IF(ISPIN.EQ.1) THEN
         CALL SYMTR1(IRREPR,VRT(1,2),POP(1,1),DISSYG,ICORE(I000),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYG),
     &               ICORE(ITMP+2*IINTFP*DISSYG))
        ENDIF
C
C SAVE G(IJ,KA) ON DISK
C
        call checksum('tpdiajk',icore(i000),numsyg*dissyg,s)
        CALL PUTLST(ICORE(I000),1,NUMSYG,1,IRREPR,LISTG)
C
1100   CONTINUE
C
2000  CONTINUE
C
C ALL DONE, RETURN
C
      TWO=0.D0
      IF(IUHF.EQ.0)
     &   CALL CHECKGAM1(ICORE,10,110,TWO,IUHF,2,POP)
      IF(IUHF.EQ.1) THEN
       CALL CHECKGAM(ICORE,10,110,TWO)
       CALL CHECKGAM(ICORE,7,107,TWO)
       CALL CHECKGAM(ICORE,8,108,TWO)
       CALL CHECKGAM(ICORE,9,109,TWO)
      ENDIF
C
      RETURN
      END
