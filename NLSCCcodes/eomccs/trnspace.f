      SUBROUTINE TRNSPACE(LENGTH,NDIMNEW,NDIMOLD,SCR,TRAN,
     &                    MAXCOR,IRREPX,ISIDE,LIST,INORM,
     &                    MAXORD,IOLDEST,PRINT,IUHF,ICOLSCR)
C
C PERFORMS A LINEAR TRANSFORMATION OF THE DAVIDSON EXPANSION
C SPACE:
C
C            NEWBASIS(I) = SUM OLDBASIS(J) * TRAN(J,I)
C                           J
CEND
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL INORM,PRINT
      INTEGER DIRPRD,DISSIZ
      DIMENSION SCR(MAXCOR),TRAN(NDIMOLD,NDIMNEW)
C
      COMMON/SYMINF/NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),ID(18)
C
      DATA ONE /1.0D0/
C
      IGET(I)=1+MOD(IOLDEST+MAXORD-I,MAXORD+1)
C
C FIRST SEE IF WE CAN HOLD ALL NEW EXPANSION VECTORS IN CORE.
C
      NSIZENEW=LENGTH*NDIMNEW
      I000=1
C
      IF (INORM .AND. IUHF.EQ.0) THEN
C SG 11/8/96 Figure out how much memory is needed in SPNTSING
        NEEDED = 0
        DO 5 I = 1,NIRREP
          DISSIZ = IRPDPD(I,ISYTYP(1,16))
          NUMDIS = IRPDPD(I,ISYTYP(2,16))
          NEEDED = MAX(NEEDED,DISSIZ,NUMDIS)
 5      CONTINUE
        NEEDED = NEEDED + LENGTH
      ELSE
        NEEDED = LENGTH
      ENDIF
      IF (MAXCOR .GE. (NSIZENEW+NEEDED)) THEN
C
       WRITE(6,1000)
C
C READ IN AS MANY OLD VECTORS AS POSSIBLE INTO THE MATRIX 
C   OLDBASIS(X,*)
C
       CALL ZERO(SCR,NSIZENEW)
       I010=I000+NSIZENEW
       I020=I010+NSIZENEW
       MXCOR=MAXCOR-I010+1
       NINCOR=MIN(NDIMOLD,MXCOR/LENGTH)
       NLEFT=NDIMOLD
       NFIRST=1
       IOFFE=1
1      NREAD=MIN(NLEFT,NINCOR)
       IOFFOLD=I010
       DO 10 I=1,NREAD
        CALL GETLST(SCR(IOFFOLD),IGET(NFIRST-1+I),1,1,ISIDE,LIST)
        IOFFOLD=IOFFOLD+LENGTH
10     CONTINUE
       CALL XGEMM('N','N',LENGTH,NDIMNEW,NREAD,ONE,SCR(I010),LENGTH,
     &            TRAN(IOFFE,1),NDIMOLD,ONE,SCR(I000),LENGTH) 
       NFIRST=NFIRST+NREAD
       IOFFE=IOFFE+NREAD
       NLEFT=NLEFT-NREAD
       IF(NLEFT.NE.0)GOTO 1
C
       IOFFNEW=I000
       DO 11 I=1,NDIMNEW
        I020=I010+LENGTH
C
C RENORMALIZE AND CLEAN UP NOISE
C
        IF(INORM)THEN
         IF(IUHF.EQ.0)THEN
          CALL SCOPY(LENGTH,SCR(IOFFNEW),1,SCR(I010),1)
          CALL SPNTSING(IRREPX,SCR(I010),SCR(I020),MAXCOR-I020+1)
          Z=SQRT(SDOT(LENGTH,SCR(IOFFNEW),1,SCR(I010),1))
         ELSE
          Z=SQRT(SDOT(LENGTH,SCR(IOFFNEW),1,SCR(IOFFNEW),1))
         ENDIF
         CALL SSCAL(LENGTH,ONE/Z,SCR(IOFFNEW),1)
        ENDIF
        CALL PUTLST(SCR(IOFFNEW),NDIMNEW-I+1,1,1,ISIDE,LIST)
        IOFFNEW=IOFFNEW+LENGTH
11     CONTINUE
C
C OUT-OF-CORE ALGORITHM
C
      ELSE 
       WRITE(6,1001)
C
C LOOP OVER VECTORS IN NEW BASIS
C SG 11/8/96 Calculate as many new vectors as possibile
C
       NEWLEFT = NDIMNEW
       NEWFIRST = 1
       NEWINCOR = MIN(NDIMNEW,(MAXCOR-NEEDED)/LENGTH)
       IF (NEWINCOR .LT. 1) THEN
         WRITE (6,1002)
         CALL INSMEM ('TRNSPACE',MAXCOR,NEEDED+LENGTH)
         CALL ERREX
       ENDIF
C
C Start of loop over new vectors
C
 12    CONTINUE
       NEWREAD = MIN(NEWLEFT,NEWINCOR)
       CALL ZERO(SCR(I000),LENGTH*NEWREAD)
       I010 = I000 + LENGTH*NEWREAD
       I020 = I010 + LENGTH
       MXCOR = MAXCOR - I010 + 1
C
C CALCULATE CONTRIBUTIONS FROM AS MANY OLD EXPANSION VECTORS
C AS POSSIBLE
C
       NINCOR=MIN(NDIMOLD,MXCOR/LENGTH)
       NLEFT=NDIMOLD
       NFIRST=1
       IOFFE=1
C
C Start of loop over old vectors
C
 2     CONTINUE
       NREAD=MIN(NLEFT,NINCOR)
       IOFFOLD=I010
       DO 13 I=1,NREAD
         CALL GETLST(SCR(IOFFOLD),IGET(NFIRST+I-1),1,1,ISIDE,LIST)
         IOFFOLD=IOFFOLD+LENGTH
 13    CONTINUE
       CALL XGEMM('N','N',LENGTH,NEWREAD,NREAD,ONE,SCR(I010),LENGTH,
     &            TRAN(IOFFE,NEWFIRST),NDIMOLD,ONE,SCR(I000),LENGTH)
       NFIRST=NFIRST+NREAD
       IOFFE=IOFFE+NREAD
       NLEFT=NLEFT-NREAD
       IF(NLEFT.NE.0)GOTO 2
C
C End of loop over old vectors
C
       IOFFNEW = I000
       DO 14 INEW = NEWFIRST,NEWFIRST+NEWREAD
         IF(INORM)THEN
           IF(IUHF.EQ.0)THEN
             CALL SCOPY(LENGTH,SCR(IOFFNEW),1,SCR(I010),1)
             CALL SPNTSING(IRREPX,SCR(I010),SCR(I020),MAXCOR-I020+1)
             Z=SQRT(SDOT(LENGTH,SCR(IOFFNEW),1,SCR(I010),1))
           ELSE  
             Z=SQRT(SDOT(LENGTH,SCR(IOFFNEW),1,SCR(IOFFNEW),1))
           ENDIF
           CALL SSCAL(LENGTH,ONE/Z,SCR(IOFFNEW),1)
         ENDIF
         CALL PUTLST(SCR(IOFFNEW),ICOLSCR+NDIMNEW-INEW+1,1,1,ISIDE,472)
         IOFFNEW = IOFFNEW + LENGTH
 14    CONTINUE
       NEWFIRST = NEWFIRST + NEWREAD
       NEWLEFT = NEWLEFT - NEWREAD
       IF (NEWLEFT .NE. 0) GOTO 12
C
C End of loop over new vectors
C 
       DO 15 INEW=1,NDIMNEW
        CALL GETLST(SCR,ICOLSCR+NDIMNEW-INEW+1,1,1,ISIDE,472)
        CALL PUTLST(SCR,NDIMNEW-INEW+1,1,1,ISIDE,LIST)
 15    CONTINUE
C
      ENDIF
C
      RETURN
1000  FORMAT(T3,'@TRNSPACE-F, Using in-core truncation algorithm.')
1001  FORMAT(T3,'@TRNSPACE-F, Using out-of-core truncation algorithm.')
1002  FORMAT(T3,'@TRNSPACE-F, Insuffient core for truncation of ',
     &          'expansion space.')
      END
