      SUBROUTINE E_TSPABCI(CORE,MAXCOR,ICODE)
      IMPLICIT INTEGER (A-Z)
      DOUBLE PRECISION CORE(1)
      LOGICAL INCORE
C
      DIMENSION IOFFOV(8,8,4)
C
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),
     1                DIRPRD(8,8)
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON /SYM/    POP(8,2),VRT(8,2),NTAA,NTBB,NF1AA,NF2AA,
     1                NF1BB,NF2BB
      COMMON /INFO/   NOCCO(2),NVRTO(2)
      COMMON /FLAGS/  IFLAGS(100)
      EQUIVALENCE(IDRLVL,IFLAGS( 3))
C
      COMMON /ACTORB/ ABSVRT(600,8,2),ABSOCC(600,8,2)
      COMMON /T3OFF/  IOFFVV(8,8,10),IOFFOO(8,8,10),IOFFVO(8,8,4)
      COMMON /LISWI/  LWIC11,LWIC12,LWIC13,LWIC14,
     1                LWIC15,LWIC16,LWIC17,LWIC18,
     1                LWIC21,LWIC22,LWIC23,LWIC24,
     1                LWIC25,LWIC26,LWIC27,LWIC28,
     1                LWIC31,LWIC32,LWIC33,
     1                LWIC34,LWIC35,LWIC36,
     1                LWIC37,LWIC38,LWIC39,LWIC40,LWIC41,LWIC42
      COMMON /GAMLIS/ LISGO1,LISGO2,LISGO3,LISGO4,LISGV1,LISGV2,
     1                LISGV3,LISGV4
C
      WRITE(6,1000)
 1000 FORMAT(' @TSPABCI-I, AbIc/AbcI record transposition. ')
C
      IF(ICODE.EQ.1)THEN
      WRITE(6,1010)
 1010 FORMAT(' @TSPABCI-I, (O,v) ---> (v,O) transposition. ')
      ENDIF
      IF(ICODE.EQ.2)THEN
      WRITE(6,1020)
 1020 FORMAT(' @TSPABCI-I, (v,O) ---> (O,v) transposition. ')
      ENDIF
      IF(ICODE.NE.1.AND.ICODE.NE.2)THEN
      WRITE(6,1030) ICODE
 1030 FORMAT(' @TSPABCI-I, Invalid value of ICODE. ICODE is ',I10)
      STOP
      ENDIF
C
      INCORE = .TRUE.
      CALL MKOFOV(IOFFOV)
C
      
      DO   10 IRPCI = 1,NIRREP
      I000 = 1
      I010 = I000 + MAX0(IRPDPD(IRPCI,13),IRPDPD(IRPCI,12))
      I020 = I010 + MAX0(IRPDPD(IRPCI,13),IRPDPD(IRPCI,12))
      I030 = I020 + MAX0(IRPDPD(IRPCI,13),IRPDPD(IRPCI,12))
      I040 = I030 +      IRPDPD(IRPCI,13)*IRPDPD(IRPCI,12)
      NEED = I040 * IINTFP
C
      IF(NEED.LE.MAXCOR.AND.INCORE)THEN
C
      WRITE(6,1040)
 1040 FORMAT(' @TSPABCI-I, In-core algorithm is being used. ')
C
C     ABCI intermediates for basic D3T3 = W T2 contraction.
C
      CALL GETLST(CORE(I030),1,IRPDPD(IRPCI,12),2,IRPCI,LWIC17)
C
      IF(ICODE.EQ.1)THEN
      CALL SYMTR1(IRPCI,POP(1,1),VRT(1,2),IRPDPD(IRPCI,13),
     1            CORE(I030),CORE(I000),CORE(I010),CORE(I020))
      ELSE
      CALL SYMTR1(IRPCI,VRT(1,2),POP(1,1),IRPDPD(IRPCI,13),
     1            CORE(I030),CORE(I000),CORE(I010),CORE(I020))
      ENDIF
C
      CALL PUTLST(CORE(I030),1,IRPDPD(IRPCI,12),2,IRPCI,LWIC17)
      
C
      IF(LWIC17.NE.LWIC27)THEN
C
C     ABCI intermediates for basic D2T2 = W T3 contraction.
C
      CALL GETLST(CORE(I030),1,IRPDPD(IRPCI,12),2,IRPCI,LWIC27)
C
      IF(ICODE.EQ.1)THEN
      CALL SYMTR1(IRPCI,POP(1,1),VRT(1,2),IRPDPD(IRPCI,13),
     1            CORE(I030),CORE(I000),CORE(I010),CORE(I020))
      ELSE
      CALL SYMTR1(IRPCI,VRT(1,2),POP(1,1),IRPDPD(IRPCI,13),
     1            CORE(I030),CORE(I000),CORE(I010),CORE(I020))
      ENDIF
C
      CALL PUTLST(CORE(I030),1,IRPDPD(IRPCI,12),2,IRPCI,LWIC27)
C
      ENDIF
C
ceom      IF(IDRLVL.GT.0.AND.ICODE.EQ.2)THEN
C
C     ABCI Gamma intermediates.
C
c      CALL GETLST(CORE(I030),1,IRPDPD(IRPCI,12),2,IRPCI,LISGV3)
c      CALL SYMTR1(IRPCI,VRT(1,2),POP(1,1),IRPDPD(IRPCI,13),
c     1            CORE(I030),CORE(I000),CORE(I010),CORE(I020))
c      CALL PUTLST(CORE(I030),1,IRPDPD(IRPCI,12),2,IRPCI,LISGV3)
c      ENDIF
C
      ELSE
C
C     Otherwise we do the transposition out-of-core.
C
      WRITE(6,1050)
 1050 FORMAT(' @TSPABCI-I, Out-of-core algorithm is being used. ')
C
      CALL OCSYMTR1(CORE,IRPDPD(IRPCI,13),IRPDPD(IRPCI,12),IRPCI,
     1              LWIC17,IOFFOV,ICODE)
C
      IF(LWIC17.NE.LWIC27)THEN
      CALL OCSYMTR1(CORE,IRPDPD(IRPCI,13),IRPDPD(IRPCI,12),IRPCI,
     1              LWIC27,IOFFOV,ICODE)
      ENDIF
C
c      IF(IDRLVL.GT.0.AND.ICODE.EQ.2)THEN
c      CALL OCSYMTR1(CORE,IRPDPD(IRPCI,13),IRPDPD(IRPCI,12),IRPCI,
c     1              LISGV3,IOFFOV,ICODE)
c      ENDIF
C
      ENDIF
C
   10 CONTINUE
      RETURN
      END
