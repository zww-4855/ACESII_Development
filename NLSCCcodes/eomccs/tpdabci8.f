      SUBROUTINE TPDABCI8(ICORE,MAXCOR,IUHF)
C
C CALCULATION OF THE FIRST ABCI CONTRIBUTION TO
C THE EOM-CCSD TWO-PARTICLE DENSITY MATRIX
C
C          1/2 TAU(NI,AB) L(MN,EC) R(EM)
C
CEND 
C
C CODED JG SEPTEMBER/93
C
      IMPLICIT INTEGER (A-Z)
      LOGICAL MBPT2,CC,CCD,RCCD,DRCCD,LCCSD,CC2
      DOUBLE PRECISION HALF,ONE,TWO
      DIMENSION ICORE(MAXCOR)
      DIMENSION I0T(2),I0X(2),ITR(4)
      COMMON/STATSYM/IRREPX
      COMMON/REFTYPE/MBPT2,CC,CCD,RCCD,DRCCD,LCCD,LCCSD,CC2
      COMMON/SYMLOC/ISYMOFF(8,8,25)
      COMMON/SYMINF/NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON/SYM/POP(8,2),VRT(8,2),NT(2),NFMI(2),NFEA(2)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
C
      DATA HALF,ONE,TWO /0.5D0,1.0D0,2.0D0/
      DATA ITR/21,22,14,24/
C
C READ IN T1 AND R1 AMPLITUDES AND ALLOCATE STORAGE FOR INTERMEDIATES
C
      I0X(1)=1
      I0X(2)=I0X(1)+IRPDPD(1,9)*IINTFP*IUHF
      I0T(1)=I0X(2)+IRPDPD(1,10)*IINTFP
      I0T(2)=I0T(1)+IRPDPD(1,9)*IINTFP*IUHF
      ISTART=I0T(2)+IRPDPD(1,10)*IINTFP
C
      IF(MBPT2 .OR. LCCD .OR. LCCSD .OR. RCCD .OR. DRCCD .OR. CC2)
     &  GOTO 1000
      CALL GETLST(ICORE(I0T(1)),1,1,1,1,90)
      IF(IUHF.EQ.1) THEN
       CALL GETLST(ICORE(I0T(2)),1,1,1,2,90)
      ENDIF
C
C CALCULATE INTERMEDIATES X(CN) = R(EM)*L(EM,CN)
C
      CALL GT2XF(ICORE(1),IRREPX,IRREPX,434,490,2,ICORE(ISTART),
     &           MAXCOR,IUHF,0)
C
      DO 10 ISPIN=4,4-3*IUHF,-1
       LISTT=43+MIN(ISPIN,3)
       LISTG=126+ISPIN
       DO 100 IRREP=1,NIRREP
        DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTT))
        NUMDST=IRPDPD(IRREP,ISYTYP(2,LISTT))
        IF(ISPIN.LE.2)THEN
         NUMDSTX=IRPDPD(IRREP,20+ISPIN)
        ELSE
         NUMDSTX=NUMDST
        ENDIF
        DISSYG=IRPDPD(IRREP,ISYTYP(1,LISTG))
        NUMDSG=IRPDPD(IRREP,ISYTYP(2,LISTG))
        MAXT  =MAX(DISSYT,NUMDST,NUMDSTX,DISSYG,NUMDSG)
        I000=ISTART
        I010=I000+IINTFP*DISSYT*NUMDSTX
        ITMP1=I010
        ITMP2=ITMP1+IINTFP*MAXT
        ITMP3=ITMP2+IINTFP*MAXT
        IEND=ITMP3+IINTFP*MAXT
C
C READ IN T AMPLITUDES, FORM TAU AND EXPAND RHS FOR ISPIN=1 OR 2
C
        CALL GETLST(ICORE(I000),1,NUMDST,1,IRREP,LISTT)
        IF(ISPIN.LE.2) THEN
         CALL FTAU(ICORE(I000),ICORE(I0T(ISPIN)),ICORE(I0T(ISPIN)),
     &             DISSYT,NUMDST,POP(1,ISPIN),POP(1,ISPIN),
     &             VRT(1,ISPIN),VRT(1,ISPIN),IRREP,ISPIN,ONE)
         CALL VMINUS(ICORE(I000),DISSYT*NUMDST)
         CALL SYMEXP(IRREP,POP(1,ISPIN),DISSYT,ICORE(I000))
        ELSE
         CALL FTAU(ICORE(I000),ICORE(I0T(1)),ICORE(I0T(2)),
     &             DISSYT,NUMDST,POP(1,1),POP(1,2),
     &             VRT(1,1),VRT(1,2),IRREP,3,ONE)
         IF(ISPIN.EQ.4)THEN
          CALL SYMTR1(IRREP,POP(1,1),POP(1,2),DISSYT,ICORE(I000),
     &                ICORE(ITMP1),ICORE(ITMP2),ICORE(ITMP3))
         ENDIF
        ENDIF
C
C EVALUATE DENSITY MATRIX CONTRIBUTION
C
C   G(A<B,IC) = TAU(A<B,IN)*X(CN)[ISPIN=1 AND 2]
C   G(Ab,Ic)  = TAU(Ab,In)*X(cn) [ISPIN=3]
C   G(Ab,iC)  = TAU(Ab,iN)*X(CN) [ISPIN=4]
C
        IF(ISPIN.LE.2)THEN
         ISPINX=ISPIN
         ISPINI=ISPIN
        ELSE
         ISPINI=ISPIN-2
         ISPINX=3-ISPINI
        ENDIF
        IOFFT=I000
        IOFFX=I0X(ISPINX)
C
        IF(ISPIN.NE.3)THEN
C
C CALCULATE ONE ABC SET AT A TIME : G(ABC;I)=TAU(ABIN)*X(CN)
C
         IFIRSTG=1
         DO 110 IRREPI=1,NIRREP
          IRREPC=DIRPRD(IRREP,IRREPI)
          IRREPN=IRREPC
          NUMC=VRT(IRREPC,ISPINX)
          NUMN=POP(IRREPN,ISPINX)
          NUMI=POP(IRREPI,ISPINI)
          DO 111 I=1,NUMI
           NROW=DISSYG
           NCOL=NUMC
           NSUM=NUMN
           IOFFT=I000+IINTFP*(ISYMOFF(IRREPN,IRREP,ITR(ISPIN))
     &           +I-2)*DISSYT
           IOFFX=I0X(ISPINX)+IINTFP*(ISYMOFF(IRREPN,1,8+ISPINX)-1)
           CALL GETLST(ICORE(I010),IFIRSTG,NUMC,1,IRREP,LISTG)
           CALL XGEMM('N','T',NROW,NCOL,NSUM,HALF,ICORE(IOFFT),
     &                NROW*NUMI,ICORE(IOFFX),NCOL,ONE,ICORE(I010),
     &                NROW)
           CALL PUTLST(ICORE(I010),IFIRSTG,NUMC,1,IRREP,LISTG)

           IFIRSTG=IFIRSTG+NUMC
111       CONTINUE
110      CONTINUE  
C
        ELSE
C
C   G(Ab,Ic)  = TAU(Ab,In)*X(cn) [ISPIN=3]
C
         MXCOR=MAXCOR-I010+1
         IFIRST=1
         DO 120 IRREPC=1,NIRREP
          IRREPN=IRREPC
          IRREPI=DIRPRD(IRREPN,IRREP)
          NUMC=VRT(IRREPC,ISPINX)
          NUMN=POP(IRREPN,ISPINX)
          NUMI=POP(IRREPI,ISPINI)
          NROW=DISSYG*NUMI
          NSUM=NUMN
C
          NINCOR=MXCOR/(IINTFP*MAX(1,NROW))
          NLEFT=NUMC
1         NCOL=MIN(NINCOR,NLEFT)
          NREAD=NCOL*NUMI
          CALL GETLST(ICORE(I010),IFIRST,NREAD,1,IRREP,LISTG)
          CALL XGEMM('N','T',NROW,NCOL,NSUM,HALF,ICORE(IOFFT),NROW,
     &               ICORE(IOFFX),NUMC,ONE,ICORE(I010),NROW)
          CALL PUTLST(ICORE(I010),IFIRST,NREAD,1,IRREP,LISTG)
          NLEFT=NLEFT-NCOL
          IOFFX=IOFFX+IINTFP*NCOL*NSUM
          IFIRST=IFIRST+NCOL*NUMI
          IF(NLEFT.NE.0)GOTO 1
C
          IOFFT=IOFFT+IINTFP*NROW*NSUM
120      CONTINUE  
C
        ENDIF
C
100    CONTINUE
C
10    CONTINUE
C
C ALL DONE, RETURN
C
1000  CONTINUE
      TWO=4.D0/DFLOAT(1+IUHF)
      if(iuhf.eq.0) then
       call checkgam1(icore,30,130,two,iuhf,2,vrt)
      endif
      IF(IUHF.EQ.1) THEN
       CALL CHECKGAM(ICORE,30,130,TWO)
       CALL CHECKGAM(ICORE,27,127,TWO)
       CALL CHECKGAM(ICORE,28,128,TWO)
       CALL CHECKGAM(ICORE,29,129,TWO)
      ENDIF
      RETURN
      END
